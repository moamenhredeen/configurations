#+TITLE: my emacs configurations

* package-repos
  #+BEGIN_SRC emacs-lisp

    (require 'package)
    (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
    ;;(add-to-list 'package-archives '("melpa-stable" . "https://stable.melpa.org/packages/") t)
    (add-to-list 'load-path "~/.emacs.d/site-lisp")
    (package-initialize)


  #+END_SRC
* customization
** basics
   #+BEGIN_SRC emacs-lisp
     (load-theme 'gruvbox 1)
     (custom-set-faces
      '(region ((t ( :background "#44000D" :weight bold))))
      '(cursor ((t (:background "#C6DE41" :foreground "black"))))
      '(hl-line  ((t (  :background "#1D1D00"))))
      '(line-number  ((t ( :inherit default :background "#3c3836" :foreground "#C6DE41"))))
      '(line-number-current-line ((t (   :inherit default :background "#1D1D00" :foreground "#C6DE41" :inverse-video t :weight ultra-bold))))
      '(org-checkbox ((t (  :foreground "#fe8019" :weight extra-bold))))
      '(org-hide ((t (   :foreground "#282828"))))
      '(org-level-1  ((t (:foreground "#fb4934" :weight extra-bold :height 1.4))))
      '(org-level-2  ((t (:foreground "#b8bb26" :weight extra-bold :height 1.2))))
      '(org-level-3  ((t (:foreground "#fabd2f" :weight bold))))
      '(org-level-4  ((t (:foreground "#d3869b"))))
      '(org-level-5  ((t (:foreground "#83a598"))))
      '(org-tag ((t (:foreground "#7CBD1E" :weight bold))))
      '(doom-modeline-bar ((t (:inherit highlight :background "black")))))

     ;; no need to start the server on startup 
     ;;(server-start)
     ;; Let's get a backtrace when errors are
     (setq debug-on-error t)
     ;; Display byte-compiler warnings on error
     (setq byte-compile-debug t)


     ;;The default is to wait 1 second, which I find a bit long
     (setq echo-keystrokes 0.1)

     ;; Stop polluting the directory with auto-saved files and backup
     (setq auto-save-default nil)
     (setq make-backup-files nil)
     (setq auto-save-list-file-prefix nil)
     ;; diable lockfiles
     (setq create-lockfiles nil)

     ;; ???
     (setq kill-whole-line t)
     (setq kill-read-only-ok t)
     (setq require-final-newline t)

     ;; Scrolling done right
     (setq scroll-step 1 scroll-conservatively 10000)
     ;;(setq scroll-error-top-bottom t)
																							   ;;;;;;;;;;;;;;;;;;(setq focus-follows-mouse t)
     ;;(setq recenter-positions '(top bottom middle))

     ;; Number of lines of continuity when scrolling by screenfulls
     ;;(setq next-screen-context-lines 0)

     ;; Always use "y" for "yes"
     (fset 'yes-or-no-p 'y-or-n-p)
     (flyspell-mode t)
     (setq fill-column 72)
     (setq spell-command "aspell")
     ;;(setq text-mode-hook '(turn-on-auto-fill text-mode-hook-identify))
     (setq max-lisp-eval-depth 10000)




     (ido-mode 1)                           ;; better autocomplation
     (blink-cursor-mode 0)                  ;; disable binking cursor
     (show-paren-mode 1)                    ;; show matching parens or failure to match
     (global-auto-revert-mode 1)            ;; reload files that chage on disk
     (column-number-mode 1)                 ;; show column numbers in mode line
     (global-hl-line-mode 1)                ;; change the color of the line the cursor is on
     (setq visible-bell 1)                  ;; disable sounds
     (setq-default truncate-lines t)         ;; default to NOT wrapping long lines in display
     (tool-bar-mode 0)                       ;; hide the tool bar
     (menu-bar-mode 0)                       ;; hide the "File Edit..." menu
     (scroll-bar-mode 1)                    ;; hide the scroll bars

     (setq inhibit-startup-screen t)         ;; don't show the "splash" screen

     ;; activate nyan mode
     ;;(nyan-mode 1)

     ;; line numbers
     (global-display-line-numbers-mode t)
     ;;(setq display-line-numbers-type 'relative)

     ;; Default Frame
     (setq initial-frame-alist
	   '((left-margin-width . 10)
	     (menu-bar-lines . 0)
	     (tool-bar-lines . 0)
	     (horizontal-scroll-bars . nil)
	     (vertical-scroll-bars . nil)))

     ;; Don't display initial messages
     (setq initial-scratch-message (concat "Hi Moamen, Wie gehts dir heute ? \nHeute ist der "(format-time-string "%A %e %B" (current-time)) ))
     (setq initial-major-mode 'org-mode)
     (setq inhibit-startup-screen t)
     (setq inhibit-startup-echo-area-message "Hi Moamen :)")
     (setq use-dialog-box nil)
     (setq default-frame-alist initial-frame-alist)
     (setq line-move-visual nil)
     (setq visible-bell t)
     (setq tab-bar-show nil)

     ;; change the selection color 
     ;;(set-face-attribute 'region nil :background "#44000D" :weight 'bold)



     (set-fontset-font "fontset-default" nil 
		       (font-spec :size 28 :name "Cascadia Code PL"))

     ;; Setting English Font
     (set-face-attribute
      'default nil
      :stipple nil
      :height 130
      :width 'normal
      :inverse-video nil
      :box nil
      :strike-through nil
      :overline nil
      :underline nil
      :slant 'normal
      :weight 'normal
      :foundry "outline"
      :family "DejaVu Sans Mono for Powerline")
     ;; disable CJK coding/encoding (Chinese/Japanese/Korean characters)
     (setq utf-translate-cjk-mode nil)

     (set-language-environment 'utf-8)
     (setq locale-coding-system 'utf-8)

     ;; set the default encoding system
     (prefer-coding-system 'utf-8)
     (setq default-file-name-coding-system 'utf-8)
     (set-default-coding-systems 'utf-8)
     (set-terminal-coding-system 'utf-8)
     (set-keyboard-coding-system 'utf-8)
     ;; backwards compatibility as default-buffer-file-coding-system
     ;; is deprecated in 23.2.
     (if (boundp buffer-file-coding-system)
	 (setq buffer-file-coding-system 'utf-8)
       (setq default-buffer-file-coding-system 'utf-8))

     ;; Treat clipboard input as UTF-8 string first; compound text next, etc.
     (setq x-select-request-type '(UTF8_STRING COMPOUND_TEXT TEXT STRING))
   #+END_SRC
   
   #+RESULTS:
   | UTF8_STRING | COMPOUND_TEXT | TEXT | STRING |

** minor modes
   #+BEGIN_SRC emacs-lisp
     ;; Enabling and disabling some modes
     ;; Less is more - see https://bzg.fr/en/emacs-strip-tease/
     (show-paren-mode 1)
     (auto-insert-mode 1)
     (display-time-mode 1)
     (tooltip-mode -1)
     (blink-cursor-mode -1)
     (scroll-bar-mode -1)
     (pixel-scroll-mode 1)
     (mouse-avoidance-mode 'cat-and-mouse)

   #+END_SRC
** packages
   #+BEGIN_SRC emacs-lisp

     ;;  doom-modeline 
     (use-package doom-modeline
       :ensure t)
     :init (doom-modeline-mode 1)
     (setq doom-modeline-height 50)
     (setq doom-modeline-bar-with 4)
     (setq doom-modeline-buffer-state-icon t)
     (setq doom-modeline-enable-word-count t)
     (setq doom-modeline-modal-icon t)
   #+END_SRC
* packages 
** org pomodoro
   #+BEGIN_SRC emacs-lisp
     (setq org-pomodoro-keep-killed-pomodoro-time t)
     (setq org-pomodoro-length 120)
     (setq org-pomodoro-long-break-frequency 2)
     (setq org-pomodoro-long-break-length 15)
   #+END_SRC

   #+RESULTS:
   : 15

** undo-tree
   #+BEGIN_SRC emacs-lisp

     (use-package undo-tree
       :ensure t)
     (undo-tree-mode 1)

   #+END_SRC

** swiper/ivy/counsel
   #+BEGIN_SRC emacs-lisp
     (use-package counsel
       :ensure t
       :bind
       (("M-y" . counsel-yank-pop)
	:map ivy-minibuffer-map
	("M-y" . ivy-next-line)))

     (use-package ivy
       :ensure t
       :diminish (ivy-mode)
       :bind (("C-x b" . ivy-switch-buffer))
       :config
       (ivy-mode 1)
       (setq ivy-use-virtual-buffers t)
       (setq ivy-count-format "%d/%d ")
       (setq ivy-display-style 'fancy))


     (use-package swiper
       :ensure t
       :bind (("C-s" . swiper-isearch)
	      ("C-r" . swiper-isearch)
	      ("C-c C-r" . ivy-resume)
	      ("M-x" . counsel-M-x)
	      ("C-x C-f" . counsel-find-file))
       :config
       (progn
	 (ivy-mode 1)
	 (setq ivy-use-virtual-buffers t)
	 (setq ivy-display-style 'fancy)
	 (define-key read-expression-map (kbd "C-r") 'counsel-expression-history)
	 ))

   #+END_SRC
** yasnippet
   #+BEGIN_SRC emacs-lisp
     (require 'yasnippet)
     (yas/load-directory "~/.emacs.d/elpa/yasnippet-snippets-0.24")
     (yas-global-mode 1)
   #+END_SRC
** auto completion
   #+BEGIN_SRC emacs-lisp
      (require 'auto-complete)
      (setq ac-dwim t)
      (ac-config-default)
      (setq ac-sources '(ac-source-yasnippet
      		   ac-source-abbrev
      		   ac-source-words-in-same-mode-buffers))
      ;;(setq ac-auto-start nil)
     (ac-set-trigger-key "TAB")
   #+END_SRC
** restclient
   #+begin_src emacs-lisp
     (require 'restclient)
     (add-to-list 'auto-mode-alist '("\\.http\\'" . restclient-mode))
   #+end_src
** company 
   #+begin_src emacs-lisp
     (use-package company
       :config
       (progn
	 (add-hook 'after-init-hook 'global-company-mode)
	 (global-set-key (kbd "M-/") 'company-complete-common-or-cycle)
	 (setq company-idle-delay 0)))
     (use-package company-auctex :ensure t)
     (add-to-list 'company-backends #'company-auctex)
     ;; (use-package company-tabnine :ensure t)
     ;; ;; Trigger completion immediately.
     ;; (setq company-idle-delay 0)

     ;; ;; Number the candidates (use M-1, M-2 etc to select completions).
     ;; (setq company-show-numbers t)
   #+end_src
* org-mode
  #+BEGIN_SRC emacs-lisp
	;;(require 'org-tempo)
	(require 'org-bullets)
	;;(require 'ol-gnus)

	;; make available "org-bullet-face" such that I can control the font size individually
	(setq org-bullets-face-name (quote org-bullet-face))
	(add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))


	;;other symbols :  ‚û™ü°∫‚òØ‚∏ª‚ùØüî•‚ü∂‚ñ∂
	(setq org-bullets-bullet-list '("‚ñ§" "‚∏ª" "‚ûú" "‚ü∂" "‚û™" "‚ùØ"))
	(setq org-ellipsis "‚§µ")
	(add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))


	(setq org-todo-keywords '((sequence "üî•TODO" "üïòNEXT" "‚ùØ‚ùØ‚ùØINPROGRESS" "|" "DONE" "BLOCKED")))
	(setq org-todo-keyword-faces
	      '(("üî•TODO" . (:foreground "#cc241d" :weight bold :inverse-video t))
		("üïòNEXT" . (:foreground "#cc241d" :weight bold :inverse-video t))
		("‚ùØ‚ùØ‚ùØINPROGRESS" . (:foreground "#d65d0e" :weight bold :inverse-video t))
		("DONE" . (:foreground "#98971a" :weight bold :inverse-video t))
		("BLOCKED" . (:foreground "#ebdbb2" :weight bold :inverse-video t))))

	(setq org-link-abbrev-alist
	      '(("ggle" . "http://www.google.com/search?q=%s")
		("gmap" . "http://maps.google.com/maps?q=%s")
		("omap" . "http://nominatim.openstreetmap.org/search?q=%s&polygon=1")))

	;; read agenda files form directory : ~/.agenda
	(setq  org-agenda-files  (append (file-expand-wildcards "~/.agenda/*.org")))

	;; Resume clocking task when emacs is restarted
	(org-clock-persistence-insinuate)
	;; Save the running clock and all clock history when exiting Emacs, load it on startup
	(setq org-clock-persist t)
	;; Resume clocking task on clock-in if the clock is open
	(setq org-clock-in-resume t)
	;; Do not prompt to resume an active clock, just resume it
	(setq org-clock-persist-query-resume nil)
	;; Change tasks to whatever when clocking in
	(setq org-clock-in-switch-to-state "‚ùØ‚ùØ‚ùØINPROGRESS")
	;; Save clock data and state changes and notes in the LOGBOOK drawer
	(setq org-clock-into-drawer t)
	;; Sometimes I change tasks I'm clocking quickly - this removes clocked tasks
	;; with 0:00 duration
	(setq org-clock-out-remove-zero-time-clocks t)
	;; Clock out when moving task to a done state
	(setq org-clock-out-when-done t)
	;; Enable auto clock resolution for finding open clocks
	(setq org-clock-auto-clock-resolution (quote when-no-clock-is-running))
	;; Include current clocking task in clock reports
	(setq org-clock-report-include-clocking-task t)
	;; use pretty things for the clocktable
	(setq org-pretty-entities t)

	(setq org-startup-folded t)

	(setq org-log-note-clock-out t)
	(setq org-log-redeadline 'time)
	(setq org-log-repeat t)
	(setq org-log-reschedule 'time)
	(setq org-log-states-order-reversed nil)
	(setq org-log-done 'time)

  #+END_SRC

  #+RESULTS:

* programming languages
** cpp
   #+BEGIN_SRC emacs-lisp
     (use-package flycheck
       :config
       (progn
	 (global-flycheck-mode)))
     (add-hook 'c++-mode-hook 'irony-mode)
     (add-hook 'c-mode-hook 'irony-mode)
     (add-hook 'objc-mode-hook 'irony-mode)
     (add-hook 'irony-mode-hook 'irony-cdb-autosetup-compile-options)
   #+END_SRC

* customizing key binding
** packages
   #+BEGIN_SRC emacs-lisp
     ;; evil mode 
     (evil-mode 1)
   #+END_SRC
** functions
   #+BEGIN_SRC emacs-lisp

     (defun shell-jump-to-current-directory ()
       "Open *shell* and change to directory of the given
	  buffer. Start's shell if needed. Handles dired-mode specially to
	  look for the 'closest' subdirectory when multiple directories are
	  open."
       (interactive)
       (let* ((dir (if (equal major-mode 'dired-mode)          ; using dired?
		       (dired-find-directory-at-point)         ; dired mode: find closest directory
		     default-directory))                     ; other buffer: use default dir for buffer
	      (dir (replace-regexp-in-string " " "\\\\ " dir)) ; escape spaces
	      (cmd (concat "cd " dir)))                        ; add on the 'cd'
	 (when (one-window-p)                                  ; in there is only one window
	   (split-window-right))                               ; split to 2 windows, left/right
	 (if (get-buffer "*shell*")                            ; check if shell is already active
	     (progn                                              ; yes (true case)
	       (other-window 1)                                  ; switch to other window
	       (switch-to-buffer "*shell*"))                     ; change to the *shell* buffer
	   (progn                                              ; no (false case)
	     (shell)                                           ; start the shell
	     (sleep-for 0 10)))                                ; 10 millisec delay to let the shell get started before sending input (hack)
	 (end-of-buffer)                                       ; move point to the end of the shell buffer
	 (insert cmd)                                          ; insert the 'cd' command
	 (comint-send-input)))                                 ; signal the shell that a command has been sent

     ;; Easily jump to my main org file
     (defun open-mytasks-file nil
       "Find the bzg.org file."
       (interactive)
       (find-file "~/.org-files/tasks.org")
       (delete-other-windows))

   #+END_SRC
** key-binding
   #+BEGIN_SRC emacs-lisp
     ;; emacs key-binding
     (global-set-key "\C-cj" 'shell-jump-to-current-directory)
     (global-set-key "\M-o"  'other-window)        ; change quickly between windows, default C-x o
     (global-set-key "\C-cc" (quote compile))      ; compile in buffers directory, usually via 'make'
     (global-set-key "\C-cl" 'auto-fill-mode)      ; toggle whether emacs wraps/newlines text or not
     (global-set-key "\C-cp" 'replace-string)      ; query for find/replace and replace all
     (global-set-key "\M-j"  'join-line)           ; join current line with line above
     (global-set-key "\C-xg" 'magit-status)        ; emacs interface to git called 'Magit'
     (global-set-key "\C-ck" 'browse-kill-ring)    ; examine the "cut" text newest to oldest
     (global-set-key "\C-cv" 'find-file-at-point)  ; treat text at point as a file name and open it
     (define-key key-translation-map (kbd "ESC") (kbd "C-g"))

     ;; evil keybinding
     (evil-set-leader 'normal (kbd "SPC"))
     (evil-define-key 'normal 'global (kbd "<leader>w") 'save-buffer)
     (evil-define-key 'normal 'global (kbd "<leader>s") 'swiper-isearch)
     (evil-define-key 'normal 'global (kbd "<leader>p") 'counsel-M-x)
     (evil-define-key 'normal 'global (kbd "<leader>f") 'counsel-find-file)
     (evil-define-key 'normal 'global (kbd "<leader>b") 'ivy-switch-buffer)
     (evil-define-key 'normal 'global (kbd "<leader>j") 'shell-jump-to-current-directory)
     (evil-define-key 'normal 'global (kbd "<leader>0") 'delete-window)
     (evil-define-key 'normal 'global (kbd "<leader>1") 'delete-other-windows)
     (evil-define-key 'normal 'global (kbd "<leader>v") 'split-window-horizontally)
     (evil-define-key 'normal 'global (kbd "<leader>h") 'split-window-vertically)
     (evil-define-key 'normal 'global (kbd "<leader>t") 'open-mytasks-file)
     (evil-define-key 'normal 'global (kbd "<leader>x") 'evil-save-modified-and-close)
     (evil-define-key 'normal 'global (kbd "<leader>r") '(lambda () (interactive) (load-file "~/.emacs.d/init.el")))
     (evil-define-key 'normal 'global (kbd "<leader>a") '(lambda () (interactive) (org-agenda)))



     ;; orgmode keybinding
     (define-key global-map "\C-cl" 'org-store-link)
     (define-key global-map "\C-ca" 'org-agenda)
     (define-key global-map "\C-cc" 'org-capture)
     (define-key global-map "\C-k" 'org-pomodoro)

     #+END_SRC

   #+RESULTS:
   : org-pomodoro

* registers
  #+BEGIN_SRC emacs-lisp
    (set-register ?e (cons 'file "~/.emacs.d/config.org"))
  #+END_SRC

* latex
  #+begin_src emacs-lisp
    (load "auctex.el" nil t t)
    ;;(load "preview-latex.el" nil t t)
    (setq TeX-auto-save t)
    (setq TeX-parse-self t)
    (setq-default TeX-master nil)

  #+end_src

  #+RESULTS:

