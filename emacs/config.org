#+TITLE: my emacs configurations
* package-repos
#+BEGIN_SRC emacs-lisp

(require 'package)
(add-to-list 'package-archives
             '("melpa-stable" . "https://stable.melpa.org/packages/") t)
(package-initialize)


#+END_SRC
* basics customization
#+BEGIN_SRC emacs-lisp

(ido-mode 1)                           ;; better autocomplation
(blink-cursor-mode 0)                  ;; disable binking cursor
(show-paren-mode 1)                    ;; show matching parens or failure to match
(global-auto-revert-mode 1)            ;; reload files that chage on disk
(column-number-mode 1)                 ;; show column numbers in mode line
(global-hl-line-mode 1)                ;; change the color of the line the cursor is on
(setq visible-bell 1)                  ;; disable sounds
(setq-default truncate-lines t)         ;; default to NOT wrapping long lines in display
(tool-bar-mode 0)                       ;; hide the tool bar
(menu-bar-mode 0)                       ;; hide the "File Edit..." menu
(scroll-bar-mode -1)                    ;; hide the scroll bars

(setq inhibit-startup-screen t)         ;; don't show the "splash" screen
(setq initial-scratch-message           ;; put this text in the scratch buffer
      ";; Hello Moamen :)\n")

;; activate nyan mode
(nyan-mode 1)


;; mode line customization
(use-package doom-modeline
  :ensure t)
(doom-modeline-init)

;; line numbers
(display-line-numbers-mode 1 )
#+END_SRC

* themes
#+BEGIN_SRC emacs-lisp

(load-theme 'leuven 1)

#+END_SRC
* customizing key binding
#+BEGIN_SRC emacs-lisp

    (global-set-key "\M-o"  'other-window)        ; change quickly between windows, default C-x o
    (global-set-key "\C-cc" (quote compile))      ; compile in buffers directory, usually via 'make'
    (global-set-key "\C-cl" 'auto-fill-mode)      ; toggle whether emacs wraps/newlines text or not
    (global-set-key "\C-cp" 'replace-string)      ; query for find/replace and replace all
    (global-set-key "\M-j"  'join-line)           ; join current line with line above
    (global-set-key "\C-xg" 'magit-status)        ; emacs interface to git called 'Magit'
    (global-set-key "\C-ck" 'browse-kill-ring)    ; examine the "cut" text newest to oldest
    (global-set-key "\C-cv" 'find-file-at-point)  ; treat text at point as a file name and open it

#+END_SRC
* undo-tree
#+BEGIN_SRC emacs-lisp

(use-package undo-tree
  :ensure t)
(undo-tree-mode 1)

#+END_SRC

* swiper/ivy/counsel
#+BEGIN_SRC emacs-lisp


   (use-package counsel
:ensure t
  :bind
  (("M-y" . counsel-yank-pop)
   :map ivy-minibuffer-map
   ("M-y" . ivy-next-line)))




  (use-package ivy
  :ensure t
  :diminish (ivy-mode)
  :bind (("C-x b" . ivy-switch-buffer))
  :config
  (ivy-mode 1)
  (setq ivy-use-virtual-buffers t)
  (setq ivy-count-format "%d/%d ")
  (setq ivy-display-style 'fancy))


  (use-package swiper
  :ensure t
  :bind (("C-s" . swiper-isearch)
	 ("C-r" . swiper-isearch)
	 ("C-c C-r" . ivy-resume)
	 ("M-x" . counsel-M-x)
	 ("C-x C-f" . counsel-find-file))
  :config
  (progn
    (ivy-mode 1)
    (setq ivy-use-virtual-buffers t)
    (setq ivy-display-style 'fancy)
    (define-key read-expression-map (kbd "C-r") 'counsel-expression-history)
    ))

#+END_SRC
* shell jump to current directory
#+BEGIN_SRC emacs-lisp

(defun shell-jump-to-current-directory ()
  "Open *shell* and change to directory of the given
buffer. Start's shell if needed. Handles dired-mode specially to
look for the 'closest' subdirectory when multiple directories are
open."
  (interactive)
  (let* ((dir (if (equal major-mode 'dired-mode)          ; using dired?
                  (dired-find-directory-at-point)         ; dired mode: find closest directory
                  default-directory))                     ; other buffer: use default dir for buffer
         (dir (replace-regexp-in-string " " "\\\\ " dir)) ; escape spaces
	 (cmd (concat "cd " dir)))                        ; add on the 'cd'
    (when (one-window-p)                                  ; in there is only one window
      (split-window-right))                               ; split to 2 windows, left/right
    (if (get-buffer "*shell*")                            ; check if shell is already active
      (progn                                              ; yes (true case)
        (other-window 1)                                  ; switch to other window
        (switch-to-buffer "*shell*"))                     ; change to the *shell* buffer
      (progn                                              ; no (false case)
        (shell)                                           ; start the shell
        (sleep-for 0 10)))                                ; 10 millisec delay to let the shell get started before sending input (hack)
    (end-of-buffer)                                       ; move point to the end of the shell buffer
    (insert cmd)                                          ; insert the 'cd' command
    (comint-send-input)))                                 ; signal the shell that a command has been sent

(global-set-key "\C-cj" 'shell-jump-to-current-directory)

#+END_SRC
* javascript
** rjsx-mode
#+BEGIN_SRC emacs-lisp

(use-package rjsx-mode           ;; install rjsx-mode package
    :ensure t                    ;; make sure that the package was installed
    :mode "\\.js\\'")            ;; when to use rjsx-mode



#+END_SRC
** Prettier
#+BEGIN_SRC emacs-lisp

(use-package prettier
    :ensure t
    :after (rjsx-mode)
    :hook  (rjsx-mode . prettier-mode))

#+END_SRC
* evil-mode
#+BEGIN_SRC emacs-lisp

(use-package evil
    :ensure t)
(evil-mode 1)
#+END_SRC
* org-mode
#+BEGIN_SRC emacs-lisp

  (use-package org-bullets
	:ensure t
	:config
	(add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))

  (global-set-key "\C-ca" 'org-agenda)
  (global-set-key "\C-cc" 'org-capture)

;;  (setq org-agenda-files (quote "~\\emacs-agenda\\plan.org"))

  ;; (setq org-capture-templates
  ;;           '(("l" "Link" entry (file+headline "~/Sync/orgfiles/links.org" "Links")
  ;;              "* %a %^g\n %?\n %T\n %i")
  ;;             ("b" "Blog idea" entry (file+headline "~/Sync/orgfiles/i.org" "POSTS:")
  ;;              "* %?\n%T" :prepend t)
  ;;             ("t" "To Do Item" entry (file+headline "~/Sync/orgfiles/i.org" "To Do and Notes")
  ;;              "* TODO %?\n%u" :prepend t)
  ;;             ("m" "Mail To Do" entry (file+headline "~/Sync/orgfiles/i.org" "To Do and Notes")
  ;;              "* TODO %a\n %?" :prepend t)
  ;;             ("n" "Note" entry (file+olp "~/Sync/orgfiles/i.org" "Notes")
  ;;              "* %u %? " :prepend t)
  ;;             ("r" "RSS" entry (file+headline "~/Sync/shared/elfeed.org" "Feeds misc")
  ;;              "** %A %^g\n")
  ;;             ))


  (org-babel-do-load-languages
       'org-babel-load-languages
       '((python . t)
	 (emacs-lisp . t)
	 (shell . t)
	 (java . t)
	 (C . t)
	 (js . t)
	 (ditaa . t)
	 (dot . t)
	 (org . t)
	 (latex . t )
	 ))


#+END_SRC

