#+TITLE: Emacs Configuration
* Basic Configuraiton
TODO: rename the header of this section
#+BEGIN_SRC emacs-lisp

  (defvar efs/default-font-size 180)
  (defvar efs/default-variable-font-size 180)

  ;; Make frame transparency overridable
  (defvar efs/frame-transparency '(90 . 90))

  ;; The default is 800 kilobytes.  Measured in bytes.
  (setq gc-cons-threshold (* 50 1000 1000))

  (defun efs/display-startup-time ()
    (message "Emacs loaded in %s with %d garbage collections."
	     (format "%.2f seconds"
		     (float-time
		      (time-subtract after-init-time before-init-time)))
	     gcs-done))

  (add-hook 'emacs-startup-hook #'efs/display-startup-time)


  ;; disable line numbers
  (linum-mode 0)
  (line-number-mode 0)
  (menu-bar-mode 0)
  (tool-bar-mode 0)
  (load-theme 'tango-dark)
#+END_SRC

* Package Repository
#+BEGIN_SRC emacs-lisp

  ;; Initialize package sources
  (require 'package)

  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
			   ("org" . "https://orgmode.org/elpa/")
			   ("elpa" . "https://elpa.gnu.org/packages/")))

#+END_SRC

* Install use-package
#+BEGIN_SRC emacs-lisp
  (package-initialize)
  (unless package-archive-contents
    (package-refresh-contents))

  ;; Initialize use-package on non-Linux platforms
  (unless (package-installed-p 'use-package)
    (package-install 'use-package))

  (require 'use-package)
  (setq use-package-always-ensure t)
#+END_SRC

* Customize UI
** change default emacs config
#+BEGIN_SRC emacs-lisp

  (setq inhibit-startup-message t)

  (scroll-bar-mode -1)        ; Disable visible scrollbar
  (tool-bar-mode -1)          ; Disable the toolbar
  (tooltip-mode -1)           ; Disable tooltips
  (set-fringe-mode 10)        ; Give some breathing room

  (menu-bar-mode -1)            ; Disable the menu bar

  ;; Set up the visible bell
  (setq visible-bell nil)


  (column-number-mode)
  (global-display-line-numbers-mode t)

  ;; Set frame transparency
  (set-frame-parameter (selected-frame) 'alpha efs/frame-transparency)
  (add-to-list 'default-frame-alist `(alpha . ,efs/frame-transparency))
  (set-frame-parameter (selected-frame) 'fullscreen 'maximized)
  (add-to-list 'default-frame-alist '(fullscreen . maximized))

  ;; Disable line numbers for some modes
  (dolist (mode '(org-mode-hook
		  term-mode-hook
		  shell-mode-hook
		  treemacs-mode-hook
		  eshell-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 0))))

  (set-face-attribute 'default nil :font "Fira Code Retina" :height efs/default-font-size)

  ;; Set the fixed pitch face
  (set-face-attribute 'fixed-pitch nil :font "Fira Code Retina" :height efs/default-font-size)

  ;; Set the variable pitch face
  (set-face-attribute 'variable-pitch nil :font "Cantarell" :height efs/default-variable-font-size :weight 'regular)
#+END_SRC
** more ui
#+BEGIN_SRC emacs-lisp
  (use-package doom-themes
    :init (load-theme 'doom-palenight t))

  ;; (use-package gruvbox-theme
  ;;   :init (load-theme 'gruvbox))

  (use-package all-the-icons)

  (use-package doom-modeline
    :init (doom-modeline-mode 1)
    :custom ((doom-modeline-height 15)))
#+END_SRC
* Evil Mode
#+BEGIN_SRC emacs-lisp
  (use-package general
    :after evil
    :config
    (general-create-definer efs/leader-keys
      :keymaps '(normal insert visual emacs)
      :prefix "SPC"
      :global-prefix "C-SPC")

    (efs/leader-keys
      "t"  '(:ignore t :which-key "toggles")
      "tt" '(counsel-load-theme :which-key "choose theme")
      "fde" '(lambda () (interactive) (find-file (expand-file-name "~/.emacs.d/Emacs.org")))))

  (use-package evil
    :init
    (setq evil-want-integration t)
    (setq evil-want-keybinding nil)
    (setq evil-want-C-u-scroll t)
    (setq evil-want-C-i-jump nil)
    :config
    (evil-mode 1)
    (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)
    (define-key evil-insert-state-map (kbd "C-h") 'evil-delete-backward-char-and-join)

    ;; Use visual line motions even outside of visual-line-mode buffers
    (evil-global-set-key 'motion "j" 'evil-next-visual-line)
    (evil-global-set-key 'motion "k" 'evil-previous-visual-line)

    (evil-set-initial-state 'messages-buffer-mode 'normal)
    (evil-set-initial-state 'dashboard-mode 'normal))

  (use-package evil-collection
    :after evil
    :config
    (evil-collection-init))


  ;; TODO: how to use leader key 
  (evil-set-leader 'normal (kbd "SPC"))

  ;; TODO: define shortcuts
  (evil-define-key 'normal 'global (kbd "<leader>w") 'save-buffer)
  (evil-define-key 'normal 'global (kbd "<leader>f") 'find-file)
  (evil-define-key 'normal 'global (kbd "<leader>b") 'ido-switch-buffer)

#+END_SRC

* Vertico
#+BEGIN_SRC emacs-lisp
  ;; Enable vertico
  (use-package vertico
    :init
    (vertico-mode)

    ;; Different scroll margin
    ;; (setq vertico-scroll-margin 0)

    ;; Show more candidates
    ;; (setq vertico-count 20)

    ;; Grow and shrink the Vertico minibuffer
    ;; (setq vertico-resize t)

    ;; Optionally enable cycling for `vertico-next' and `vertico-previous'.
    ;; (setq vertico-cycle t)
    )

  ;; Persist history over Emacs restarts. Vertico sorts by history position.
  (use-package savehist
    :init
    (savehist-mode))

  ;; A few more useful configurations...
  (use-package emacs
    :init
    ;; Add prompt indicator to `completing-read-multiple'.
    ;; We display [CRM<separator>], e.g., [CRM,] if the separator is a comma.
    (defun crm-indicator (args)
      (cons (format "[CRM%s] %s"
		    (replace-regexp-in-string
		     "\\`\\[.*?]\\*\\|\\[.*?]\\*\\'" ""
		     crm-separator)
		    (car args))
	    (cdr args)))
    (advice-add #'completing-read-multiple :filter-args #'crm-indicator)

    ;; Do not allow the cursor in the minibuffer prompt
    (setq minibuffer-prompt-properties
	  '(read-only t cursor-intangible t face minibuffer-prompt))
    (add-hook 'minibuffer-setup-hook #'cursor-intangible-mode)

    ;; Emacs 28: Hide commands in M-x which do not work in the current mode.
    ;; Vertico commands are hidden in normal buffers.
    ;; (setq read-extended-command-predicate
    ;;       #'command-completion-default-include-p)

    ;; Enable recursive minibuffers
    (setq enable-recursive-minibuffers t))

  ;; Configure directory extension.
  (use-package vertico-directory
    :after vertico
    :ensure nil
    ;; More convenient directory navigation commands
    :bind (:map vertico-map
		("RET" . vertico-directory-enter)
		("DEL" . vertico-directory-delete-char)
		("M-DEL" . vertico-directory-delete-word))
    ;; Tidy shadowed file names
    :hook (rfn-eshadow-update-overlay . vertico-directory-tidy))


  ;; Optionally use the `orderless' completion style.
  (use-package orderless
    :init
    ;; Configure a custom style dispatcher (see the Consult wiki)
    ;; (setq orderless-style-dispatchers '(+orderless-dispatch)
    ;;       orderless-component-separator #'orderless-escapable-split-on-space)
    (setq completion-styles '(orderless basic substring partial-completion flex)
	  completion-category-defaults nil
	  completion-category-overrides '((file (styles partial-completion)))))


#+END_SRC

* projectile
#+begin_src emacs-lisp
  (use-package projectile
    :diminish projectile-mode
    :config (projectile-mode)
    :bind-keymap
    ("C-c p" . projectile-command-map)
    :init
    ;; NOTE: Set this to the folder where you keep your Git repos!
    (when (file-directory-p "~/git-repos")
      (setq projectile-project-search-path '("~/git-repos")))
    (setq projectile-switch-project-action #'projectile-dired))
#+end_src
* programming
** lsp
#+begin_src emacs-lisp
  ;; (defun my/lsp-mode-setup ()
  ;;   (setq lsp-headerline-breadcrumb-segments '(path-up-to-project file symbols))
  ;;   (lsp-headerline-breadcrumb-mode))


  (use-package lsp-mode
	:init
	(setq lsp-keymap-prefix "C-c l")  ;; Or 'C-l', 's-l'
	;;:hook (lsp-mode . my/lsp-mode-setup)
	:commands (lsp lsp-deferred))

  (use-package lsp-ui
	:hook (lsp-mode . lsp-ui-mode)
	:custom
	(lsp-ui-doc-position 'bottom))
#+end_src
** typescript
#+begin_src emacs-lisp
  (use-package typescript-mode
    :mode "\\.ts\\'"
    :hook (typescript-mode . lsp-deferred)
    :config
    (setq typescript-indent-level 2))
#+end_src

** common lisp
#+begin_src emacs-lisp
    (use-package slime
      :hook ((lisp-mode . slime-mode)
	     (inferior-lisp-mode . inferior-slime-mode))
      :config
      (setq inferior-lisp-program "sbcl")
      (slime-setup '(slime-fancy)))
#+end_src

* Org Mode
#+begin_src emacs-lisp 

  (use-package org-bullets
    :hook (org-mode . org-bullets-mode)
    :config
    ;;other symbols :  ☯⸻❯⟶▶
    (setq org-bullets-face-name (quote org-bullet-face))
    (setq org-bullets-bullet-list '("▤" "➪" "➜" "⟶" "➪" "❯"))
    (setq org-ellipsis "⤵")
    (setq org-todo-keywords '((sequence "TODO" "NEXT" "❯❯❯ INPROGRESS" "|" "DONE" "BLOCKED")))
    (setq org-todo-keyword-faces
	  '(("TODO" . (:foreground "#cc241d" :weight bold :inverse-video t))
	    ("NEXT" . (:foreground "#cc241d" :weight bold :inverse-video t))
	    ("❯❯❯ INPROGRESS" . (:foreground "#d65d0e" :weight bold :inverse-video t))
	    ("DONE" . (:foreground "#98971a" :weight bold :inverse-video t))
	    ("BLOCKED" . (:foreground "#ebdbb2" :weight bold :inverse-video t))))

    (setq org-link-abbrev-alist
	  '(("ggle" . "http://www.google.com/search?q=%s")
	    ("gmap" . "http://maps.google.com/maps?q=%s")
	    ("omap" . "http://nominatim.openstreetmap.org/search?q=%s&polygon=1"))))
#+end_src
