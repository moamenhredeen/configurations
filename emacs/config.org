#+TITLE: my emacs configurations
* package-repos
  #+BEGIN_SRC emacs-lisp

  (require 'package)
  (add-to-list 'package-archives
	       '("melpa-stable" . "https://stable.melpa.org/packages/") t)
  (add-to-list 'load-path "~/.emacs.d/site-lisp")
  (package-initialize)


  #+END_SRC
* customization
** basics
   #+BEGIN_SRC emacs-lisp
      (server-start)
      ;; Let's get a backtrace when errors are
      ;;(setq debug-on-error t)

      ;; Display byte-compiler warnings on error
      (setq byte-compile-debug t)

      ;; The default is to wait 1 second, which I find a bit long
      (setq echo-keystrokes 0.1)

      ;; Stop polluting the directory with auto-saved files and backup
      (setq auto-save-default nil)
      (setq make-backup-files nil)
      (setq auto-save-list-file-prefix nil)
      ;; diable lockfiles
      (setq create-lockfiles nil)

      ;; ???
      (setq kill-whole-line t)
      (setq kill-read-only-ok t)
      (setq require-final-newline t)

      ;; Scrolling done right
      ;;(setq scroll-error-top-bottom t)
		  ;;;;;;;;;;;;;;;;;;(setq focus-follows-mouse t)
      ;;(setq recenter-positions '(top bottom middle))

      ;; Number of lines of continuity when scrolling by screenfulls
      ;;(setq next-screen-context-lines 0)

      ;; Always use "y" for "yes"
      (fset 'yes-or-no-p 'y-or-n-p)

      (setq fill-column 72)
      (setq spell-command "aspell")
      (setq tab-always-indent 'always)
      (setq text-mode-hook '(turn-on-auto-fill text-mode-hook-identify))
      (setq max-lisp-eval-depth 10000)




      (load-theme 'gruvbox 1)
      (ido-mode 1)                           ;; better autocomplation
      (blink-cursor-mode 0)                  ;; disable binking cursor
      (show-paren-mode 1)                    ;; show matching parens or failure to match
      (global-auto-revert-mode 1)            ;; reload files that chage on disk
      (column-number-mode 1)                 ;; show column numbers in mode line
      (global-hl-line-mode 1)                ;; change the color of the line the cursor is on
      (setq visible-bell 1)                  ;; disable sounds
      (setq-default truncate-lines t)         ;; default to NOT wrapping long lines in display
      (tool-bar-mode 0)                       ;; hide the tool bar
      (menu-bar-mode 0)                       ;; hide the "File Edit..." menu
      (scroll-bar-mode -1)                    ;; hide the scroll bars

      (setq inhibit-startup-screen t)         ;; don't show the "splash" screen

      ;; activate nyan mode
      ;;(nyan-mode 1)

      ;; line numbers
      (global-display-line-numbers-mode t)
      (setq display-line-numbers-type 'relative)

      ;; Default Frame
      (setq initial-frame-alist
	    '((left-margin-width . 10)
	      (menu-bar-lines . 0)
	      (tool-bar-lines . 0)
	      (horizontal-scroll-bars . nil)
	      (vertical-scroll-bars . nil)))

      ;; Don't display initial messages
      (setq initial-scratch-message "")
      (setq initial-major-mode 'org-mode)
      (setq inhibit-startup-screen t)
      (setq inhibit-startup-echo-area-message "Hi Moamen :)")
      (setq use-dialog-box nil)
      (setq default-frame-alist initial-frame-alist)
      (setq line-move-visual nil)
      (setq visible-bell t)
      (setq tab-bar-show nil)

      ;; change the selection color 
      (set-face-attribute
       'region nil :background "#522" :weight 'bold)

#+END_SRC

#+RESULTS:

** minor modes
   #+BEGIN_SRC emacs-lisp
   ;; Enabling and disabling some modes
   ;; Less is more - see https://bzg.fr/en/emacs-strip-tease/
   (show-paren-mode 1)
   (auto-insert-mode 1)
   (display-time-mode 1)
   (tooltip-mode -1)
   (blink-cursor-mode -1)
   (scroll-bar-mode -1)
   (pixel-scroll-mode 1)
   (mouse-avoidance-mode 'cat-and-mouse)

   #+END_SRC
** packages
   #+BEGIN_SRC emacs-lisp

   ;;  doom-modeline 
   (use-package doom-modeline
     :ensure t)
   :init (doom-modeline-mode 1)
   (setq doom-modeline-height 50)
   (setq doom-modeline-bar-with 4)
   (setq doom-modeline-buffer-state-icon t)
   (setq doom-modeline-enable-word-count t)
   (setq doom-modeline-modal-icon t)
   #+END_SRC
* packages 
** undo-tree
   #+BEGIN_SRC emacs-lisp

   (use-package undo-tree
     :ensure t)
   (undo-tree-mode 1)

   #+END_SRC

** swiper/ivy/counsel
   #+BEGIN_SRC emacs-lisp
   (use-package counsel
     :ensure t
     :bind
     (("M-y" . counsel-yank-pop)
      :map ivy-minibuffer-map
      ("M-y" . ivy-next-line)))

   (use-package ivy
     :ensure t
     :diminish (ivy-mode)
     :bind (("C-x b" . ivy-switch-buffer))
     :config
     (ivy-mode 1)
     (setq ivy-use-virtual-buffers t)
     (setq ivy-count-format "%d/%d ")
     (setq ivy-display-style 'fancy))


   (use-package swiper
     :ensure t
     :bind (("C-s" . swiper-isearch)
	    ("C-r" . swiper-isearch)
	    ("C-c C-r" . ivy-resume)
	    ("M-x" . counsel-M-x)
	    ("C-x C-f" . counsel-find-file))
     :config
     (progn
       (ivy-mode 1)
       (setq ivy-use-virtual-buffers t)
       (setq ivy-display-style 'fancy)
       (define-key read-expression-map (kbd "C-r") 'counsel-expression-history)
       ))

   #+END_SRC
** yasnippet
   #+BEGIN_SRC emacs-lisp
   (require 'yasnippet)
   (yas/load-directory "~/.emacs.d/elpa/yasnippet-snippets-0.24")
   (setq yas/indent-line nil)
   (yas-global-mode 1)
   #+END_SRC
** auto completion
   #+BEGIN_SRC emacs-lisp
   (require 'auto-complete)
   (setq ac-dwim t)
   (ac-config-default)
   (setq ac-sources '(ac-source-yasnippet
		      ac-source-abbrev
		      ac-source-words-in-same-mode-buffers))
   ;;(setq ac-auto-start nil)
   ;;(ac-set-trigger-key "TAB")
   #+END_SRC
** restclient
#+begin_src emacs-lisp
(require 'restclient)
(add-to-list 'auto-mode-alist '("\\.http\\'" . restclient-mode))
#+end_src
* org-mode
  #+BEGIN_SRC emacs-lisp

  (require 'org-tempo)
  (require 'org-bullets)
  ;;(setq org-bullets-bullet-list '("►" "▸" "•" "★" "◇" "◇" "◇" "◇"))
  (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
  (require 'ol-gnus)

  (setq org-adapt-indentation 'headline-data)
  (setq org-priority-start-cycle-with-default nil)
  (setq org-pretty-entities t)
  (setq org-fast-tag-selection-single-key 'expert)
  (setq org-fontify-done-headline t)
  (setq org-footnote-auto-label 'confirm)

  (setq org-footnote-auto-adjust t)
  (setq org-hide-emphasis-markers t)
  (setq org-hide-macro-markers t)
  (setq org-icalendar-include-todo 'all)
  (setq org-link-frame-setup '((gnus . gnus) (file . find-file-other-window)))
  (setq org-reverse-note-order t)
  (setq org-scheduled-past-days 100)
  (setq org-special-ctrl-a/e 'reversed)
  (setq org-special-ctrl-k t)
  (setq org-stuck-projects '("+LEVEL=1" ("NEXT" "TODO" "DONE")))
  (setq org-tag-persistent-alist '(("Write" . ?w) ("Read" . ?r)))
  (setq org-tag-alist
	'((:startgroup)
	  ("Handson" . ?o)
	  (:grouptags)
	  ("Write" . ?w) ("Code" . ?c) ("Tel" . ?t)
	  (:endgroup)
	  (:startgroup)
	  ("Handsoff" . ?f)
	  (:grouptags)
	  ("Read" . ?r) ("View" . ?v) ("Listen" . ?l)
	  (:endgroup)
	  ("Mail" . ?@) ("Print" . ?P) ("Buy" . ?b)))
  (setq org-tags-column -74)
  (setq org-todo-keywords '((type "STRT" "NEXT" "TODO" "WAIT" "|" "DONE" "DELEGATED" "CANCELED")))
  (setq org-todo-repeat-to-state t)
  (setq org-use-property-inheritance t)
  (setq org-use-sub-superscripts '{})
  (setq org-insert-heading-respect-content t)
  (setq org-id-method 'uuidgen)
  (setq org-combined-agenda-icalendar-file "~/.org-files/file.ics")
  (setq org-confirm-babel-evaluate nil)
  (setq org-archive-default-command 'org-archive-to-archive-sibling)
  (setq org-id-uuid-program "uuidgen")
  (setq org-use-speed-commands
	(lambda nil
	  (and (looking-at org-outline-regexp-bol)
	       (not (org-in-src-block-p t)))))
  (setq org-todo-keyword-faces
	'(("STRT" . (:foreground "white" :inverse-video t))
	  ("NEXT" . (:foreground "white" :weight bold))
	  ("WAIT" . (:foreground "#889699" :inverse-video t))
	  ("CANCELED" . (:foreground "#889699"))))
  (setq org-footnote-section "Notes")
  (setq org-link-abbrev-alist
	'(("ggle" . "http://www.google.com/search?q=%s")
	  ("gmap" . "http://maps.google.com/maps?q=%s")
	  ("omap" . "http://nominatim.openstreetmap.org/search?q=%s&polygon=1")))

  (setq org-attach-directory "~/.org-files/data/")
  (setq org-loop-over-headlines-in-active-region t)
  (setq org-create-formula-image-program 'dvipng) ;; imagemagick
  (setq org-allow-promoting-top-level-subtree t)
  (setq org-blank-before-new-entry '((heading . t) (plain-list-item . auto)))
  (setq org-enforce-todo-dependencies t)
  (setq org-fontify-whole-heading-line t)
  (setq org-file-apps
	'((auto-mode . emacs)
	  (directory . emacs)
	  ("\\.mm\\'" . default)
	  ("\\.x?html?\\'" . default)
	  ("\\.pdf\\'" . "evince %s")))
  (setq org-hide-leading-stars t)
  (setq org-global-properties '(("Effort_ALL" . "0:10 0:30 1:00 2:00 3:30 7:00")))
  (setq org-cycle-include-plain-lists nil)
  (setq org-default-notes-file "~/.org-files/notes.org")
  (setq org-directory "~/.org-files/")
  (setq org-support-shift-select t)
  (setq org-ellipsis "…")

  ;; org clock
  (org-clock-persistence-insinuate)

  (setq org-timer-default-timer 25)
  (setq org-clock-display-default-range 'thisweek)
  (setq org-clock-persist t)
  (setq org-clock-idle-time 60)
  (setq org-clock-history-length 35)
  (setq org-clock-in-resume t)
  (setq org-clock-out-remove-zero-time-clocks t)
  (setq org-clock-sound "~/Music/clock.wav")

  ;; Set headlines to STRT when clocking in
  (add-hook 'org-clock-in-hook (lambda() (org-todo "STRT")))

  ;; Set headlines to STRT and clock-in when running a countdown
  (add-hook 'org-timer-set-hook
	    (lambda ()
	      (if (eq major-mode 'org-agenda-mode)
		  (call-interactively 'org-agenda-clock-in)
		(call-interactively 'org-clock-in))))
  (add-hook 'org-timer-done-hook
	    (lambda ()
	      (if (and (eq major-mode 'org-agenda-mode)
		       org-clock-current-task)
		  (call-interactively 'org-agenda-clock-out)
		(call-interactively 'org-clock-out))))
  (add-hook 'org-timer-pause-hook
	    (lambda ()
	      (if org-clock-current-task
		  (if (eq major-mode 'org-agenda-mode)
		      (call-interactively 'org-agenda-clock-out)
		    (call-interactively 'org-clock-out)))))
  (add-hook 'org-timer-stop-hook
	    (lambda ()
	      (if org-clock-current-task
		  (if (eq major-mode 'org-agenda-mode)
		      (call-interactively 'org-agenda-clock-out)
		    (call-interactively 'org-clock-out)))))

  (org-babel-do-load-languages
   'org-babel-load-languages
   '((emacs-lisp . t)
     (shell . t)
     (dot . t)
     (clojure . t)
     (org . t)
     (ditaa . t)
     (org . t)
     (ledger . t)
     (scheme . t)
     (plantuml . t)
     (R . t)
     (gnuplot . t)))

  (setq org-babel-default-header-args
	'((:session . "none")
	  (:results . "replace")
	  (:exports . "code")
	  (:cache . "no")
	  (:noweb . "yes")
	  (:hlines . "no")
	  (:tangle . "no")
	  (:padnewline . "yes")))

  (setq org-src-tab-acts-natively t)
  (setq org-edit-src-content-indentation 0)
  (setq org-babel-clojure-backend 'inf-clojure)
  (setq org-confirm-elisp-link-function nil)
  (setq org-confirm-shell-link-function nil)

  (org-agenda-to-appt)

  ;; Hook to display the agenda in a single window
  (add-hook 'org-agenda-finalize-hook 'delete-other-windows)

  (setq org-deadline-warning-days 7)
  (setq org-agenda-inhibit-startup t)
  (setq org-agenda-diary-file "~/.org-files/rdv.org")
  (setq org-agenda-dim-blocked-tasks t)
  (setq org-agenda-entry-text-maxlines 10)
  (setq org-agenda-files '("~/.org-files/rdv.org" "~/.org-files/rdv-etalab.org" "~/.org-files/rdv-bluehats.org" "~/.org-files/rdv-emacs.org" "~/.org-files/main.org"))
  (setq org-agenda-prefix-format
	'((agenda . " %i %-12:c%?-14t%s")
	  (timeline . "  % s")
	  (todo . " %i %-14:c")
	  (tags . " %i %-14:c")
	  (search . " %i %-14:c")))
  (setq org-agenda-remove-tags t)
  (setq org-agenda-restore-windows-after-quit t)
  (setq org-agenda-show-inherited-tags nil)
  (setq org-agenda-skip-deadline-if-done t)
  (setq org-agenda-skip-deadline-prewarning-if-scheduled t)
  (setq org-agenda-skip-scheduled-if-done t)
  (setq org-agenda-skip-timestamp-if-done t)
  (setq org-agenda-sorting-strategy
	'((agenda time-up) (todo time-up) (tags time-up) (search time-up)))
  (setq org-agenda-tags-todo-honor-ignore-options t)
  (setq org-agenda-use-tag-inheritance nil)
  (setq org-agenda-window-frame-fractions '(0.0 . 0.5))
  (setq org-agenda-deadline-faces
	'((1.0001 . org-warning)              ; due yesterday or before
	  (0.0    . org-upcoming-deadline)))  ; due today or later
  (setq org-agenda-loop-over-headlines-in-active-region t)

  ;; icalendar stuff
  (setq org-icalendar-combined-name "Moamen Hredeen ORG")
  (setq org-icalendar-use-scheduled '(todo-start event-if-todo event-if-not-todo))
  (setq org-icalendar-use-deadline '(todo-due event-if-todo event-if-not-todo))
  (setq org-icalendar-timezone "Europe/Berlin")
  (setq org-icalendar-store-UID t)

  ;; (setq org-agenda-custom-commands
  ;;       `(
  ;; 	;; Week agenda for rendez-vous and tasks
  ;; 	("$" "All appointments" agenda* "Week planning"
  ;; 	 ((org-agenda-span 'week)
  ;; 	  (org-agenda-files '("~/org/rdv.org" "~/org/rdv-etalab.org" "~/org/rdv-bluehats.org" "~/org/rdv-emacs.org"))
  ;; 	  (org-agenda-sorting-strategy
  ;; 	   '(todo-state-up time-up priority-down))))

  ;; 	("%" "Personal appointments" agenda* "Month planning"
  ;; 	 ((org-agenda-span 'month)
  ;; 	  (org-agenda-files '("~/org/rdv.org" "~/org/rdv-emacs.org"))
  ;; 	  (org-agenda-sorting-strategy
  ;; 	   '(todo-state-up time-up priority-down))))

  ;; 	("@" "Mail" tags-todo "+Mail+TODO={NEXT\\|STRT\\|TODO\\|WAIT}"
  ;; 	 ((org-agenda-sorting-strategy
  ;; 	   '(todo-state-up priority-down))))
  ;; 	("?" "Waiting" tags-todo "+TODO={WAIT}")
  ;; 	("#" "To archive"
  ;; 	 todo "DONE|CANCELED|DELEGATED"
  ;; 	 ((org-agenda-files '("~/org/bzg.org" "~/org/rdv.org" "~/org/rdv-etalab.org" "~/org/rdv-emacs.org" "~/org/libre.org"))
  ;; 	  (org-agenda-sorting-strategy '(timestamp-up))))

  ;; 	(" " "Work (agenda)" agenda "Tasks and rdv for today"
  ;; 	 ((org-agenda-span 1)
  ;; 	  (org-agenda-files '("~/org/bzg.org"))
  ;; 	  (org-deadline-warning-days 0)
  ;; 	  (org-agenda-sorting-strategy
  ;; 	   '(todo-state-up deadline-up priority-down))))

  ;; 	("n" . "What's next?")
  ;; 	("nn" "Main" tags-todo "TODO={STRT\\|NEXT}"
  ;; 	 ((org-agenda-category-filter-preset '("-ETL"))
  ;; 	  (org-agenda-files '("~/org/bzg.org"))
  ;; 	  (org-agenda-sorting-strategy
  ;; 	   '(todo-state-up time-up priority-down))))
  ;; 	("ne" "Etalab" tags-todo "TODO={STRT\\|NEXT}"
  ;; 	 ((org-agenda-category-filter-preset '("+ETL"))
  ;; 	  (org-agenda-files '("~/org/bzg.org"))
  ;; 	  (org-agenda-sorting-strategy
  ;; 	   '(todo-state-up time-up priority-down))))
  ;; 	("nl" "Libre" tags-todo "TODO={STRT\\|NEXT}"
  ;; 	 ((org-agenda-files '("~/org/libre.org"))
  ;; 	  (org-agenda-sorting-strategy
  ;; 	   '(todo-state-up time-up priority-down))))

  ;; 	("!" "Etalab deadlines" agenda "Past/upcoming work deadlines"
  ;; 	 ((org-agenda-span 1)
  ;; 	  (org-agenda-category-filter-preset '("+ETL"))
  ;; 	  (org-deadline-warning-days 100)
  ;; 	  (org-agenda-entry-types '(:deadline))
  ;; 	  (org-agenda-sorting-strategy
  ;; 	   '(deadline-up todo-state-up priority-down))))
  ;; 	(":" "Other deadlines" agenda "Past/upcoming work deadlines"
  ;; 	 ((org-agenda-span 1)
  ;; 	  (org-agenda-category-filter-preset '("-ETL"))
  ;; 	  (org-deadline-warning-days 100)
  ;; 	  (org-agenda-entry-types '(:deadline))
  ;; 	  (org-agenda-sorting-strategy
  ;; 	   '(deadline-up todo-state-up priority-down))))
  ;; 	("A" "Write, Code, Mail (no work)" tags-todo
  ;;          "+TAGS={Write\\|Code\\|Mail}+TODO={NEXT\\|STRT}"
  ;; 	 ((org-agenda-category-filter-preset '("-ETL"))))
  ;; 	("Z" "Read, Listen, View (no work)" tags-todo
  ;;          "+TAGS={Read\\|Listen\\|View}+TODO={NEXT\\|STRT}"
  ;; 	 ((org-agenda-category-filter-preset '("-ETL"))))
  ;; 	("r" . "Read")
  ;; 	("rr" "Main (no work)" tags-todo "+Read+TODO={NEXT\\|STRT}"
  ;;          ((org-agenda-category-filter-preset '("-ETL"))))
  ;; 	("rR" "Libre" tags-todo "+Read+TODO={NEXT\\|STRT}"
  ;; 	 ((org-agenda-files '("~/org/libre.org"))))
  ;; 	("v" . "View")
  ;; 	("vv" "Main (no work)" tags-todo "+View+TODO={NEXT\\|STRT}"
  ;; 	 ((org-agenda-category-filter-preset '("-ETL"))))
  ;; 	("vV" "Libre" tags-todo "+View+TODO={NEXT\\|STRT}"
  ;; 	 ((org-agenda-files '("~/org/libre.org"))))
  ;; 	("l" . "Listen")
  ;; 	("ll" "Main (no work)" tags-todo "+Listen+TODO={NEXT\\|STRT}"
  ;; 	 ((org-agenda-category-filter-preset '("-ETL"))))
  ;; 	("lL" "Libre" tags-todo "+Listen+TODO={NEXT\\|STRT}"
  ;; 	 ((org-agenda-files '("~/org/libre.org"))))
  ;; 	("w" . "Write")
  ;; 	("ww" "Main (no work)" tags-todo "+Write+TODO={NEXT\\|STRT}"
  ;; 	 ((org-agenda-category-filter-preset '("-ETL"))))
  ;; 	("wW" "Libre" tags-todo "+Write+TODO={NEXT\\|STRT}"
  ;; 	 ((org-agenda-files '("~/org/libre.org"))))
  ;; 	("c" . "Code")
  ;; 	("cc" "Main (no work)" tags-todo "+Code+TODO={NEXT\\|STRT}"
  ;; 	 ((org-agenda-category-filter-preset '("-ETL"))))
  ;; 	("cC" "Libre" tags-todo "+Code+TODO={NEXT\\|STRT}"
  ;; 	 ((org-agenda-files '("~/org/libre.org"))))
  ;;))

  #+END_SRC

* programming languages
** cpp
   #+BEGIN_SRC emacs-lisp
   (use-package company
     :config
     (progn
       (add-hook 'after-init-hook 'global-company-mode)
       (global-set-key (kbd "M-/") 'company-complete-common-or-cycle)
       (setq company-idle-delay 0)))

   (use-package flycheck
     :config
     (progn
       (global-flycheck-mode)))
   (add-hook 'c++-mode-hook 'irony-mode)
   (add-hook 'c-mode-hook 'irony-mode)
   (add-hook 'objc-mode-hook 'irony-mode)

   (add-hook 'irony-mode-hook 'irony-cdb-autosetup-compile-options)
   #+END_SRC

* customizing key binding
** packages
   #+BEGIN_SRC emacs-lisp
   ;; evil mode 
   (evil-mode 1)
   #+END_SRC
** functions
   #+BEGIN_SRC emacs-lisp

   (defun shell-jump-to-current-directory ()
     "Open *shell* and change to directory of the given
	buffer. Start's shell if needed. Handles dired-mode specially to
	look for the 'closest' subdirectory when multiple directories are
	open."
     (interactive)
     (let* ((dir (if (equal major-mode 'dired-mode)          ; using dired?
		     (dired-find-directory-at-point)         ; dired mode: find closest directory
		   default-directory))                     ; other buffer: use default dir for buffer
	    (dir (replace-regexp-in-string " " "\\\\ " dir)) ; escape spaces
	    (cmd (concat "cd " dir)))                        ; add on the 'cd'
       (when (one-window-p)                                  ; in there is only one window
	 (split-window-right))                               ; split to 2 windows, left/right
       (if (get-buffer "*shell*")                            ; check if shell is already active
	   (progn                                              ; yes (true case)
	     (other-window 1)                                  ; switch to other window
	     (switch-to-buffer "*shell*"))                     ; change to the *shell* buffer
	 (progn                                              ; no (false case)
	   (shell)                                           ; start the shell
	   (sleep-for 0 10)))                                ; 10 millisec delay to let the shell get started before sending input (hack)
       (end-of-buffer)                                       ; move point to the end of the shell buffer
       (insert cmd)                                          ; insert the 'cd' command
       (comint-send-input)))                                 ; signal the shell that a command has been sent

   ;; Easily jump to my main org file
   (defun open-mytasks-file nil
     "Find the bzg.org file."
     (interactive)
     (find-file "~/.org-files/tasks.org")
     (delete-other-windows))

   #+END_SRC
** key-binding
   #+BEGIN_SRC emacs-lisp
   ;; emacs key-binding
   (global-set-key "\C-cj" 'shell-jump-to-current-directory)
   (global-set-key "\M-o"  'other-window)        ; change quickly between windows, default C-x o
   (global-set-key "\C-cc" (quote compile))      ; compile in buffers directory, usually via 'make'
   (global-set-key "\C-cl" 'auto-fill-mode)      ; toggle whether emacs wraps/newlines text or not
   (global-set-key "\C-cp" 'replace-string)      ; query for find/replace and replace all
   (global-set-key "\M-j"  'join-line)           ; join current line with line above
   (global-set-key "\C-xg" 'magit-status)        ; emacs interface to git called 'Magit'
   (global-set-key "\C-ck" 'browse-kill-ring)    ; examine the "cut" text newest to oldest
   (global-set-key "\C-cv" 'find-file-at-point)  ; treat text at point as a file name and open it
   (define-key key-translation-map (kbd "ESC") (kbd "C-g"))

   ;; evil keybinding
   (evil-set-leader 'normal (kbd "SPC"))
   (evil-define-key 'normal 'global (kbd "<leader>w") 'save-buffer)
   (evil-define-key 'normal 'global (kbd "<leader>s") 'swiper-isearch)
   (evil-define-key 'normal 'global (kbd "<leader>p") 'counsel-M-x)
   (evil-define-key 'normal 'global (kbd "<leader>f") 'counsel-find-file)
   (evil-define-key 'normal 'global (kbd "<leader>b") 'ivy-switch-buffer)
   (evil-define-key 'normal 'global (kbd "<leader>j") 'shell-jump-to-current-directory)
   (evil-define-key 'normal 'global (kbd "<leader>0") 'delete-window)
   (evil-define-key 'normal 'global (kbd "<leader>+") 'text-scale-increase)
   (evil-define-key 'normal 'global (kbd "<leader>-") 'text-scale-decrease)
   (evil-define-key 'normal 'global (kbd "<leader>v") 'split-window-horizontally)
   (evil-define-key 'normal 'global (kbd "<leader>h") 'split-window-vertically)
   (evil-define-key 'normal 'global (kbd "<leader>t") 'open-mytasks-file)
   (evil-define-key 'normal 'global (kbd "<leader>x") 'evil-save-modified-and-close)


   ;; orgmode keybinding
   (define-key global-map "\C-cl" 'org-store-link)
   (define-key global-map "\C-ca" 'org-agenda)
   (define-key global-map "\C-cc" 'org-capture)

   #+END_SRC


   
