#+TITLE: 
#+SETUPFILE: /home/moamen/new-git/dot-files/emacs/orgmode-export-themes/readtheorg_theme/theme-readtheorg-local.setup

* package-repos
  #+BEGIN_SRC emacs-lisp

    (require 'package)
    (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
    (add-to-list 'package-archives '("melpa-stable" . "https://stable.melpa.org/packages/") t)
    (add-to-list 'package-archives '("elpa" . "https://elpa.gnu.org/packages/") t)
    ;;(add-to-list 'load-path "~/.emacs.d/site-lisp")
    (package-initialize)


  #+END_SRC

  #+RESULTS:

* customization
** basics
   #+BEGIN_SRC emacs-lisp
     (load-theme 'jetbrains-darcula 1)
     (custom-set-faces
      '(default ((t (:height 98 :width normal :foundry "unknown" :family "Fira Code"))))
      '(region ((t ( :background "#44000D" :weight bold))))
      '(cursor ((t (:background "#C6DE41" :foreground "black"))))
      '(hl-line  ((t (  :background "#1D1D00"))))
      ;;'(line-number  ((t ( :inherit default :background "#3c3836" :foreground "#C6DE41"))))
      ;;'(line-number-current-line ((t (   :inherit default :background "#1D1D00" :foreground "#C6DE41" :inverse-video t))))
      ;;'(org-checkbox ((t (  :foreground "#fe8019" :weight extra-bold))))
      '(org-hide ((t (   :foreground "#282828"))))
      ;;'(org-level-1  ((t (:foreground "#fb4934" :weight extra-bold :height 1.4))))
      '(org-level-1  ((t (:weight extra-bold :height 1.4))))
      ;;'(org-level-2  ((t (:foreground "#b8bb26" :weight extra-bold :height 1.2))))
      '(org-level-2  ((t (:weight extra-bold :height 1.2))))
      ;;'(org-level-3  ((t (:foreground "#fabd2f" :weight bold))))
      ;;'(org-level-4  ((t (:foreground "#d3869b"))))
      ;;'(org-level-5  ((t (:foreground "#83a598"))))
      ;;'(org-tag ((t (:foreground "#7CBD1E" :weight bold))))
      '(doom-modeline-bar ((t (:inherit highlight :background "black")))))

     ;; ;; no need to start the server on startup 
     ;; ;;(server-start)
     ;; Let's get a backtrace when errors are
     (setq debug-on-error t)
     ;; Display byte-compiler warnings on error
     (setq byte-compile-debug t)


     ;;The default is to wait 1 second, which I find a bit long
     (setq echo-keystrokes 0.1)

     ;; Stop polluting the directory with auto-saved files and backup
     (setq auto-save-default nil)
     (setq make-backup-files nil)
     (setq auto-save-list-file-prefix nil)
     ;; diable lockfiles
     (setq create-lockfiles nil)

     ;; ???
     (setq kill-whole-line t)
     (setq kill-read-only-ok t)
     (setq require-final-newline t)

     ;; Scrolling done right
     (setq scroll-step 1 scroll-conservatively 10000)

     ;; Always use "y" for "yes"
     (fset 'yes-or-no-p 'y-or-n-p)
     (setq fill-column 72)
     (setq max-lisp-eval-depth 10000)




     (ido-mode 1)                           ;; better autocomplation
     (blink-cursor-mode 0)                  ;; disable binking cursor
     (show-paren-mode 1)                    ;; show matching parens or failure to match
     (global-auto-revert-mode 1)            ;; reload files that chage on disk
     (column-number-mode 1)                 ;; show column numbers in mode line
     (global-hl-line-mode 1)                ;; change the color of the line the cursor is on
     (setq visible-bell nil)                  ;; disable sounds
     (setq-default truncate-lines t)         ;; default to NOT wrapping long lines in display
     (tool-bar-mode 0)                       ;; hide the tool bar
     (menu-bar-mode 0)                       ;; hide the "File Edit..." menu
     (scroll-bar-mode 1)                    ;; hide the scroll bars

     (setq inhibit-startup-screen t)         ;; don't show the "splash" screen


     ;; line numbers
     (global-display-line-numbers-mode t)
     ;;(setq display-line-numbers-type 'relative)

     ;; Default Frame
     (add-to-list 'initial-frame-alist '(fullscreen . maximized))
     ;; (setq initial-frame-alist
     ;; 	'((left-margin-width . 10)
     ;; 	  (menu-bar-lines . 0)
     ;; 	  (tool-bar-lines . 0)
     ;; 	  (horizontal-scroll-bars . nil)
     ;; 	  (vertical-scroll-bars . nil)))

     ;; Don't display initial messages
     (setq initial-scratch-message "
	  ██╗  ██╗███████╗██╗     ██╗      ██████╗     ███╗   ███╗ ██████╗  █████╗ ███╗   ███╗███████╗███╗   ██╗
	  ██║  ██║██╔════╝██║     ██║     ██╔═══██╗    ████╗ ████║██╔═══██╗██╔══██╗████╗ ████║██╔════╝████╗  ██║
	  ███████║█████╗  ██║     ██║     ██║   ██║    ██╔████╔██║██║   ██║███████║██╔████╔██║█████╗  ██╔██╗ ██║
	  ██╔══██║██╔══╝  ██║     ██║     ██║   ██║    ██║╚██╔╝██║██║   ██║██╔══██║██║╚██╔╝██║██╔══╝  ██║╚██╗██║
	  ██║  ██║███████╗███████╗███████╗╚██████╔╝    ██║ ╚═╝ ██║╚██████╔╝██║  ██║██║ ╚═╝ ██║███████╗██║ ╚████║
	  ╚═╝  ╚═╝╚══════╝╚══════╝╚══════╝ ╚═════╝     ╚═╝     ╚═╝ ╚═════╝ ╚═╝  ╚═╝╚═╝     ╚═╝╚══════╝╚═╝  ╚═══╝")
     (setq initial-major-mode 'org-mode)
     (setq inhibit-startup-screen t)
     (setq inhibit-startup-echo-area-message "Hi Moamen :)")
     (setq use-dialog-box nil)
     (setq default-frame-alist initial-frame-alist)
     (setq line-move-visual nil)
     (setq tab-bar-show nil)

     ;; change the selection color 
     ;;(set-face-attribute 'region nil :background "#44000D" :weight 'bold)



     (set-fontset-font "fontset-default" nil 
		       (font-spec :size 28 :name "Cascadia Code PL"))

     ;; Setting English Font
     (set-face-attribute
      'default nil
      :stipple nil
      :height 130
      :width 'normal
      :inverse-video nil
      :box nil
      :strike-through nil
      :overline nil
      :underline nil
      :slant 'normal
      :weight 'normal
      :foundry "outline"
      :family "DejaVu Sans Mono for Powerline")
     ;; disable CJK coding/encoding (Chinese/Japanese/Korean characters)
     (setq utf-translate-cjk-mode nil)

     (set-language-environment 'utf-8)
     (setq locale-coding-system 'utf-8)

     ;; set the default encoding system
     (prefer-coding-system 'utf-8)
     (setq default-file-name-coding-system 'utf-8)
     (set-default-coding-systems 'utf-8)
     (set-terminal-coding-system 'utf-8)
     (set-keyboard-coding-system 'utf-8)
     ;; backwards compatibility as default-buffer-file-coding-system
     ;; is deprecated in 23.2.
     (if (boundp buffer-file-coding-system)
	 (setq buffer-file-coding-system 'utf-8)
       (setq default-buffer-file-coding-system 'utf-8))

     ;; Treat clipboard input as UTF-8 string first; compound text next, etc.
     (setq x-select-request-type '(UTF8_STRING COMPOUND_TEXT TEXT STRING))
   #+END_SRC
   
   #+RESULTS:
   | UTF8_STRING | COMPOUND_TEXT | TEXT | STRING |

** icons 
   #+begin_src emacs-lisp
     (use-package all-the-icons-ivy
  :disabled t
       :ensure t 
       :init (add-hook 'after-init-hook 'all-the-icons-ivy-setup)
       :config 
       (setq all-the-icons-ivy-file-commands
	     '(counsel-find-file counsel-file-jump counsel-recentf counsel-projectile-find-file counsel-projectile-find-dir)))
   #+end_src

   #+RESULTS:
   : t
   
** minor modes
   #+BEGIN_SRC emacs-lisp
     ;; Enabling and disabling some modes
     ;; Less is more - see https://bzg.fr/en/emacs-strip-tease/
     (show-paren-mode 1)
     (auto-insert-mode 1)
     (display-time-mode 1)
     (tooltip-mode -1)
     (blink-cursor-mode -1)
     (scroll-bar-mode -1)
     (pixel-scroll-mode 1)
     (mouse-avoidance-mode 'cat-and-mouse)

   #+END_SRC
** packages
   #+BEGIN_SRC emacs-lisp

     (use-package all-the-icons
       :if (display-graphic-p))
     ;;  doom-modeline 
     (use-package doom-modeline
       :ensure t)
     :init (doom-modeline-mode 1)
     (setq doom-modeline-height 50)
     (setq doom-modeline-bar-with 4)
     (setq doom-modeline-buffer-state-icon t)
     (setq doom-modeline-enable-word-count t)
     (setq doom-modeline-modal-icon t)

     (use-package rainbow-delimiters
       :ensure t 
       :config 
       (add-hook 'prog-mode-hook #'rainbow-delimiters-mode))

   #+END_SRC

   #+RESULTS:
   : t

** performance tuning 
   #+begin_src emacs-lisp
(setq gc-cons-threshold (* 100 1024 1024)
      read-process-output-max (* 1024 1024)
      company-idle-delay 0.0
      company-minimum-prefix-length 1) ;; lock files will kill `npm start'
   #+end_src
* key binding
** packages
   #+BEGIN_SRC emacs-lisp
     ;; evil mode 
     (use-package evil
       :ensure t
       :init
       (setq evil-want-integration t) ;; This is optional since it's already set to t by default.
       (setq evil-want-keybinding nil)
       (setq evil-undo-system 'undo-fu)
       ;; solve the tab conflict
       (setq evil-want-C-i-jump nil)
       :config
       (evil-mode 1))


     (use-package evil-collection
       :after evil
       :ensure t
       :config
       (evil-collection-init))
   #+END_SRC

   #+RESULTS:
   : t

** functions
   #+BEGIN_SRC emacs-lisp

     (defun shell-jump-to-current-directory ()
       "Open *shell* and change to directory of the given
	  buffer. Start's shell if needed. Handles dired-mode specially to
	  look for the 'closest' subdirectory when multiple directories are
	  open."
       (interactive)
       (let* ((dir (if (equal major-mode 'dired-mode)          ; using dired?
		       (dired-find-directory-at-point)         ; dired mode: find closest directory
		     default-directory))                     ; other buffer: use default dir for buffer
	      (dir (replace-regexp-in-string " " "\\\\ " dir)) ; escape spaces
	      (cmd (concat "cd " dir)))                        ; add on the 'cd'
	 (when (one-window-p)                                  ; in there is only one window
	   (split-window-right))                               ; split to 2 windows, left/right
	 (if (get-buffer "*shell*")                            ; check if shell is already active
	     (progn                                              ; yes (true case)
	       (other-window 1)                                  ; switch to other window
	       (switch-to-buffer "*shell*"))                     ; change to the *shell* buffer
	   (progn                                              ; no (false case)
	     (shell)                                           ; start the shell
	     (sleep-for 0 10)))                                ; 10 millisec delay to let the shell get started before sending input (hack)
	 (end-of-buffer)                                       ; move point to the end of the shell buffer
	 (insert cmd)                                          ; insert the 'cd' command
	 (comint-send-input)))                                 ; signal the shell that a command has been sent

     ;; Easily jump to my main org file
     (defun open-mytasks-file nil
       "Find the bzg.org file."
       (interactive)
       (find-file "~/.org-files/tasks.org")
       (delete-other-windows))

   #+END_SRC
** global key-binding
   #+BEGIN_SRC emacs-lisp
     ;; emacs key-binding
     (global-set-key (kbd "C-c j") 'shell-jump-to-current-directory)
     (global-set-key (kbd "M-o")  'ace-window)        ; change quickly between windows, default C-x o
     (global-set-key (kbd "C-x C-b") 'ibuffer)      

     ;; evil keybinding
     (define-key key-translation-map (kbd "ESC") 'keyboard-quit)
     (evil-set-leader 'normal (kbd "SPC"))
     (evil-set-leader 'visual (kbd "SPC"))
     ;; windows and buffers
     (evil-define-key 'normal 'global (kbd "<leader>0") 'delete-window)
     (evil-define-key 'normal 'global (kbd "<leader>1") 'delete-other-windows)
     (evil-define-key 'normal 'global (kbd "<leader>q") 'delete-window)
     (evil-define-key 'normal 'global (kbd "<leader>w") 'save-buffer)
     ;;(evil-define-key 'normal 'global (kbd "<leader>x") 'evil-save-modified-and-close)
     (evil-define-key 'normal 'global (kbd "<leader>b") 'ivy-switch-buffer)
     (evil-define-key 'normal 'global (kbd "<leader>i") 'ibuffer)
     (evil-define-key 'normal 'global (kbd "<leader>v") 'split-window-horizontally)
     (evil-define-key 'normal 'global (kbd "<leader>h") 'split-window-vertically)
     ;; file navigation
     (evil-define-key 'normal 'global (kbd "<leader>f") 'counsel-find-file)
     ;; magit
     (evil-define-key 'normal 'global (kbd "<leader>g") '(lambda () (interactive) (magit-status)))
     ;; refactoring 
     (evil-define-key 'normal 'global (kbd "<leader>r") 'replace-string)

     ;; not nessesary 
     ;;(evil-define-key 'normal 'global (kbd "<leader>s") 'swiper-isearch)
   #+END_SRC

   #+RESULTS:

** lisp mode keybinding 
   #+begin_src emacs-lisp
     (evil-define-key 'normal emacs-lisp-mode-map 
       (kbd "<leader>e") 'eval-last-sexp)
   #+end_src

   #+RESULTS:
   
* packages 
** undo-tree
   #+BEGIN_SRC emacs-lisp
     (use-package undo-tree
       :ensure t
       :config
       (undo-tree-mode 1))
   #+END_SRC

** undo 
   #+begin_src emacs-lisp
     ;; (use-package undo-fu
     ;;   :ensure t
     ;;   :config
     ;;   (global-unset-key (kbd "C-z"))
     ;;   (global-set-key (kbd "C-z")   'undo-fu-only-undo)
     ;;   (global-set-key (kbd "C-S-z") 'undo-fu-only-redo))

   #+end_src

   #+RESULTS:
   : t

** swiper/ivy/counsel
   #+BEGIN_SRC emacs-lisp
     (use-package counsel
       :ensure t
       :bind
       (("M-y" . counsel-yank-pop)
	:map ivy-minibuffer-map
	("M-j" . ivy-next-line)
	("M-k" . ivy-previous-line)))

     (use-package ivy
       :ensure t
       :diminish (ivy-mode)
       :bind (("C-x b" . ivy-switch-buffer))
       :config
       (ivy-mode 1)
       (setq ivy-use-virtual-buffers t)
       (setq ivy-count-format "%d/%d ")
       (setq ivy-display-style 'fancy))


     (use-package swiper
       :ensure t
       :bind (("C-s" . swiper-isearch)
	      ("C-r" . swiper-isearch)
	      ("C-c C-r" . ivy-resume)
	      ("M-x" . counsel-M-x)
	      ("C-x C-f" . counsel-find-file))
       :config
       (progn
	 (ivy-mode 1)
	 (setq ivy-use-virtual-buffers t) ;; show recent buffers
	 (setq ivy-display-style 'fancy)
	 (define-key read-expression-map (kbd "C-r") 'counsel-expression-history)
	 ))

   #+END_SRC

   #+RESULTS:
   : counsel-find-file

** yasnippet
   #+BEGIN_SRC emacs-lisp
     (use-package yasnippet
       :ensure t 
       :config 
       (yas-global-mode 1))
   #+END_SRC
**  TODO company 
   #+begin_src emacs-lisp
     (use-package company
       :ensure t 
       :hook (after-init . global-company-mode)
       :bind 
       ("<S-return>" . company-complete-common-or-cycle)
       :config
       (setq company-idle-delay 0))
   #+end_src
   #+RESULTS:
   : company-complete-common-or-cycle

** ispell 
   #+begin_src emacs-lisp
     (setq ispell-program-name "hunspell")
     (setq ispell-local-dictionary "de_DE_frami")
     ;;(setq ispell-local-dictionary-alist '(("de_DE" "[[:alpha:]]" "[^[:alpha:]]" "[']" nil nil nil utf-8)))
   #+end_src
   
** wich key 
   #+begin_src emacs-lisp
     (use-package which-key
       :ensure
       :config
       (which-key-mode))
   #+end_src
** projectile 
   #+begin_src emacs-lisp
     (use-package projectile
       :ensure t
       :init
       (projectile-mode +1)
       :bind (:map projectile-mode-map
		   ("C-c p" . projectile-command-map))
       :config 
       (setq projectile-completion-system 'ivy))   

     ;; evil key binding
     (evil-define-key 'normal projectile-mode-map
       (kbd "<leader>p") 'projectile-command-map)
#+end_src

   #+RESULTS:
** magit
  #+begin_src emacs-lisp
    (use-package magit
      :ensure t
      :config 
      (global-set-key (kbd "C-c g") 'magit-file-dispatch))

    (use-package git-gutter 
      :ensure t 
      :config 
      (global-git-gutter-mode +1))

  #+end_src

  #+RESULTS:
  : t

** nerd commenter
   #+begin_src emacs-lisp
     (use-package evil-nerd-commenter
       :ensure t )
     ;; evil key binding
     (evil-define-key nil 'global (kbd "<leader>ci") 'evilnc-comment-or-uncomment-lines)
     (evil-define-key nil 'global (kbd "<leader>cc") 'evilnc-copy-and-comment-lines)
     (evil-define-key nil 'global (kbd "<leader>cp") 'evilnc-comment-or-uncomment-paragraphs)
     (evil-define-key nil 'global (kbd "<leader>cr") 'comment-or-uncomment-region)
   #+end_src

   #+RESULTS:

* Emacs Modes 
** dired 
  #+begin_src emacs-lisp
    ;; (add-hook 'dired-load-hook
    ;; 	  (lambda () (load "dired-x")))
    ;; (add-hook 'dired-mode-hook
    ;; 	  (lambda () (dired-omit-mode 1)))
    ;; (setq dired-omit-files
    ;;       (concat dired-omit-files "\\|^INDEX$\\|-t\\.tex$"))

    (use-package dired-subtree :ensure t
      :after dired
      :config
      (bind-key "<tab>" #'dired-subtree-toggle dired-mode-map)
      (bind-key "<backtab>" #'dired-subtree-cycle dired-mode-map))


  #+end_src

  #+RESULTS:
  : t
  
** org-mode
*** basics 
#+begin_src emacs-lisp
(require 'org-tempo) ;; snippets and autocomplation
 (require 'org-bullets) ;; customize org mode 
 ;;(require 'ol-gnus)

 ;; make available "org-bullet-face" such that I can control the font size individually
 (setq org-bullets-face-name (quote org-bullet-face))
 (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))


 ;;other symbols :  ➪☯⸻❯⟶▶
 (setq org-bullets-bullet-list '("▤" "⸻" "➜" "⟶" "➪" "❯"))
 (setq org-ellipsis "⤵")
 (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))


 (setq org-todo-keywords '((sequence " TODO" " NEXT" "❯❯❯ INPROGRESS" "|" "DONE" "BLOCKED")))
 (setq org-todo-keyword-faces
	   '((" TODO" . (:foreground "#cc241d" :weight bold :inverse-video t))
	     (" NEXT" . (:foreground "#cc241d" :weight bold :inverse-video t))
	     ("❯❯❯ INPROGRESS" . (:foreground "#d65d0e" :weight bold :inverse-video t))
	     ("DONE" . (:foreground "#98971a" :weight bold :inverse-video t))
	     ("BLOCKED" . (:foreground "#ebdbb2" :weight bold :inverse-video t))))

 (setq org-link-abbrev-alist
	   '(("ggle" . "http://www.google.com/search?q=%s")
	     ("gmap" . "http://maps.google.com/maps?q=%s")
	     ("omap" . "http://nominatim.openstreetmap.org/search?q=%s&polygon=1")))

 ;; read agenda files form directory : ~/.agenda
 (setq  org-agenda-files  (append (file-expand-wildcards "~/.agenda/*.org")))

 ;; Resume clocking task when emacs is restarted
 (org-clock-persistence-insinuate)
 ;; Save the running clock and all clock history when exiting Emacs, load it on startup
 (setq org-clock-persist t)
 ;; Resume clocking task on clock-in if the clock is open
 (setq org-clock-in-resume t)
 ;; Do not prompt to resume an active clock, just resume it
 (setq org-clock-persist-query-resume nil)
 ;; Change tasks to whatever when clocking in
 (setq org-clock-in-switch-to-state "❯❯❯INPROGRESS")
 ;; Save clock data and state changes and notes in the LOGBOOK drawer
 (setq org-clock-into-drawer t)
 ;; Sometimes I change tasks I'm clocking quickly - this removes clocked tasks
 ;; with 0:00 duration
 (setq org-clock-out-remove-zero-time-clocks t)
 ;; Clock out when moving task to a done state
 (setq org-clock-out-when-done t)
 ;; Enable auto clock resolution for finding open clocks
 (setq org-clock-auto-clock-resolution (quote when-no-clock-is-running))
 ;; Include current clocking task in clock reports
 (setq org-clock-report-include-clocking-task t)
 ;; use pretty things for the clocktable
 (setq org-pretty-entities t)

 (setq org-startup-folded t)

 (setq org-log-note-clock-out t)
 (setq org-log-redeadline 'time)
 (setq org-log-repeat t)
 (setq org-log-reschedule 'time)
 (setq org-log-states-order-reversed nil)
 (setq org-log-done 'time)
#+end_src
*** src blocks
#+begin_src elisp
     (use-package htmlize
	:ensure t)

#+end_src
*** ox-twbs
#+begin_src elisp
    ;; html exporter
     (use-package ox-twbs
	:ensure t
	:config
	(setq org-publish-project-alist
	      '(("org-notes"
		 :base-directory "~/org/"
		 :publishing-directory "~/public_html/"
		 :publishing-function org-twbs-publish-to-html
		 :with-sub-superscript nil
		 ))))
#+end_src 
*** custom export
**** org html src block
#+begin_src emacs-lisp
;; (defun org-html-src-block (src-block _contents info)
;;   "Transcode a SRC-BLOCK element from Org to HTML.
;; CONTENTS holds the contents of the item.  INFO is a plist holding
;; contextual information."
;;   (if (org-export-read-attribute :attr_html src-block :textarea)
;;       (org-html--textarea-block src-block)
;;     (let* ((lang (org-element-property :language src-block))
;; 	   (code (org-html-format-code src-block info))
;; 	   (label (let ((lbl (org-html--reference src-block info t)))
;; 		    (if lbl (format " id=\"%s\"" lbl) "")))
;; 	   (klipsify  (and  (plist-get info :html-klipsify-src)
;; 			    (member lang '("javascript" "js"
;; 					   "ruby" "scheme" "clojure" "php" "html")))))
;;       (if (lang) (format "<pre class=\"example\"%s>\n%s</pre>" label code)
;; 	  (format "<div class=\"org-src-container\">\n%s%s\n</div>"
;; 		;; Build caption.
;; 		(let ((caption (org-export-get-caption src-block)))
;; 		  (if (not caption) ""
;; 		    (let ((listing-number
;; 			   (format
;; 			    "<span class=\"listing-number\">%s </span>"
;; 			    (format
;; 			     (org-html--translate "Listing %d:" info)
;; 			     (org-export-get-ordinal
;; 			      src-block info nil #'org-html--has-caption-p)))))
;; 		      (format "<label class=\"org-src-name\">%s%s</label>"
;; 			      listing-number
;; 			      (org-trim (org-export-data caption info))))))
;; 		;; Contents.
;; 		(format "<pre><code class=\"language-%s\" %s>%s</code></pre>" lang label code)
;; 		)))))
#+end_src
**** inline css
#+begin_src elisp
(defun my-org-inline-css-hook (exporter)
  "Insert custom inline css"
  (when (eq exporter 'html)
    (let* ((dir (ignore-errors (file-name-directory (buffer-file-name))))
           (path (concat dir "style.css"))
           (homestyle (or (null dir) (null (file-exists-p path))))
           (final (if homestyle "~/.emacs.d/org-style.css" path))) ;; <- set your own style file path
      (setq org-html-head-include-default-style nil)
      (setq org-html-head (concat
                           "<style type=\"text/css\">\n"
                           "<!--/*--><![CDATA[/*><!--*/\n"
                           (with-temp-buffer
                             (insert-file-contents final)
                             (buffer-string))
                           "/*]]>*/-->\n"
                           "</style>\n")))))

;;(add-hook 'org-export-before-processing-hook 'my-org-inline-css-hook)

#+end_src 
**** others
#+begin_src elisp
  ;; (org-export-define-derived-backend 'pd-html 'html
     ;;   :translate-alist '((inner-template . pd-html-inner-template)
     ;;                      (template . pd-html-template)))

     (defun pd-html-format-footnote-definition (fn)
	"Format the footnote definition FN."
	(let ((n (car fn)) (def (cdr fn)))
	  (concat
	   (format
	    "<li id=\"fn.%s\">" n)
	   def
	   (format
	    "<a href=\"#fnr.%s\">↩</a>" n)
	   "</li>\n")))

     (defun pd-html-footnote-section (info)
	"Format the footnote section.
     INFO is a plist used as a communication channel."
	(let* ((fn-alist (org-export-collect-footnote-definitions
			  (plist-get info :parse-tree) info))
	       (fn-alist
		(loop for (n type raw) in fn-alist collect
		      (cons n (if (eq (org-element-type raw) 'org-data)
				  (org-trim (org-export-data raw info))
				(format "<p>%s</p>"
					(org-trim (org-export-data raw info))))))))
	  (when fn-alist
	    (concat
	     "<section class=\"footnotes\">\n"
	     "<hr />\n"
	     "<ol>\n"
	     (mapconcat 'pd-html-format-footnote-definition fn-alist "\n")
	     "</ol>\n"
	     "</section>\n"))))

     (defun pd-html-inner-template (contents info)
	"Return body of document string after HTML conversion.
     CONTENTS is the transcoded contents string.  INFO is a plist
     holding export options."
	(concat
	 ;; Table of contents.
	 (let ((depth (plist-get info :with-toc)))
	   (when depth (org-html-toc depth info)))
	 ;; Document contents.
	 contents
	 ;; Footnotes section.
	 (pd-html-footnote-section info)))

     (defun pd-html-template (contents info)
	"Return complete document string after HTML conversion.
     CONTENTS is the transcoded contents string.  INFO is a plist
     holding export options."
	(concat
	 "<!DOCTYPE html>\n"
	 (format "<html lang=\"%s\">\n" (plist-get info :language))
	 "<head>\n"
	 (format "<meta charset=\"%s\">\n"
		 (coding-system-get org-html-coding-system 'mime-charset))
	 (format "<title>%s</title>\n"
		 (org-export-data (or (plist-get info :title) "") info))
	 (format "<meta name=\"author\" content=\"%s\">\n"
		 (org-export-data (plist-get info :author) info))
	 (format "<meta name=\"generator\" content=\"Org-mode\">\n")
	 "<link href=\"/css/style.css\" rel=\"stylesheet\" style=\"text/css\" />\n"
	 "<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n"
	 "</head>\n"
	 "<body>\n"
	 ;; Preamble.
	 "<header class=\"container\">\n"
	 "<h1 href=\"/\">Phillip Dixon</h1>\n"
	 "<nav>\n"
	 "<ul>\n"
	 "<li><a href=\"/\">Home</a></li>\n"
	 "<li><a href=\"/posts/\">Posts</a></li>\n"
	 "</ul>\n"
	 "</nav>\n"
	 "</header>\n"
	 ;; Document contents.
	 "<article class=\"container\">\n"
	 ;; Document title.
	 (format "<h1 class=\"title\">%s</h1>\n"
		 (org-export-data (or (plist-get info :title) "") info))
	 contents
	 "</article>\n"
	 ;; Postamble.
	 "<footer>\n"
	 "<div class=\"container\">\n"
	 "<p>&#169; 2009&#8211;14 <a href=\"/\">Phillip Dixon</a> ( <a rel=\"license\" href=\"http://creativecommons.org/licenses/by-nc-nd/3.0/nz/\">Some rights reserved</a> )</p>\n"
	 (format "<p class=\"creator\">Generated with: %s</p>\n"
		 (plist-get info :creator) info)
	 "</div>\n"
	 "</footer>\n"
	 "</body>\n"
	 "</html>\n"))
#+end_src 
*** org babel 
   #+begin_src emacs-lisp
     (org-babel-do-load-languages 'org-babel-load-languages
	 '(
	     (shell . t)
	 )
     )
   #+end_src

   #+RESULTS:

*** org mode key binding 
#+begin_src elisp
;; emacs key binding
(with-eval-after-load 'org
  (define-key org-mode-map (kbd "C-c l") 'org-store-link)
  (define-key org-mode-map (kbd "C-c a") 'org-agenda)
  (define-key org-mode-map (kbd "C-c c") 'org-capture))

;; evil key binding
(evil-define-key 'normal org-mode-map
  (kbd "<leader>a") 'org-agenda)
#+end_src

** basics 
   #+BEGIN_SRC emacs-lisp
     (require 'org-tempo) ;; snippets and autocomplation
     (require 'org-bullets) ;; customize org mode 
     ;;(require 'ol-gnus)

     ;; make available "org-bullet-face" such that I can control the font size individually
     (setq org-bullets-face-name (quote org-bullet-face))
     (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))


     ;;other symbols :  ➪☯⸻❯⟶▶
     (setq org-bullets-bullet-list '("▤" "⸻" "➜" "⟶" "➪" "❯"))
     (setq org-ellipsis "⤵")
     (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))


     (setq org-todo-keywords '((sequence " TODO" " NEXT" "❯❯❯ INPROGRESS" "|" "DONE" "BLOCKED")))
     (setq org-todo-keyword-faces
	   '((" TODO" . (:foreground "#cc241d" :weight bold :inverse-video t))
	     (" NEXT" . (:foreground "#cc241d" :weight bold :inverse-video t))
	     ("❯❯❯ INPROGRESS" . (:foreground "#d65d0e" :weight bold :inverse-video t))
	     ("DONE" . (:foreground "#98971a" :weight bold :inverse-video t))
	     ("BLOCKED" . (:foreground "#ebdbb2" :weight bold :inverse-video t))))

     (setq org-link-abbrev-alist
	   '(("ggle" . "http://www.google.com/search?q=%s")
	     ("gmap" . "http://maps.google.com/maps?q=%s")
	     ("omap" . "http://nominatim.openstreetmap.org/search?q=%s&polygon=1")))

     ;; read agenda files form directory : ~/.agenda
     (setq  org-agenda-files  (append (file-expand-wildcards "~/.agenda/*.org")))

     ;; Resume clocking task when emacs is restarted
     (org-clock-persistence-insinuate)
     ;; Save the running clock and all clock history when exiting Emacs, load it on startup
     (setq org-clock-persist t)
     ;; Resume clocking task on clock-in if the clock is open
     (setq org-clock-in-resume t)
     ;; Do not prompt to resume an active clock, just resume it
     (setq org-clock-persist-query-resume nil)
     ;; Change tasks to whatever when clocking in
     (setq org-clock-in-switch-to-state "❯❯❯INPROGRESS")
     ;; Save clock data and state changes and notes in the LOGBOOK drawer
     (setq org-clock-into-drawer t)
     ;; Sometimes I change tasks I'm clocking quickly - this removes clocked tasks
     ;; with 0:00 duration
     (setq org-clock-out-remove-zero-time-clocks t)
     ;; Clock out when moving task to a done state
     (setq org-clock-out-when-done t)
     ;; Enable auto clock resolution for finding open clocks
     (setq org-clock-auto-clock-resolution (quote when-no-clock-is-running))
     ;; Include current clocking task in clock reports
     (setq org-clock-report-include-clocking-task t)
     ;; use pretty things for the clocktable
     (setq org-pretty-entities t)

     (setq org-startup-folded t)

     (setq org-log-note-clock-out t)
     (setq org-log-redeadline 'time)
     (setq org-log-repeat t)
     (setq org-log-reschedule 'time)
     (setq org-log-states-order-reversed nil)
     (setq org-log-done 'time)

   #+END_SRC

   #+RESULTS:
   : time

** overwrite default orgmode translator
*** org html src block 
    #+begin_src emacs-lisp
      ;; (defun org-html-src-block (src-block _contents info)
      ;;   "Transcode a SRC-BLOCK element from Org to HTML.
      ;; CONTENTS holds the contents of the item.  INFO is a plist holding
      ;; contextual information."
      ;;   (if (org-export-read-attribute :attr_html src-block :textarea)
      ;;       (org-html--textarea-block src-block)
      ;;     (let* ((lang (org-element-property :language src-block))
      ;; 	   (code (org-html-format-code src-block info))
      ;; 	   (label (let ((lbl (org-html--reference src-block info t)))
      ;; 		    (if lbl (format " id=\"%s\"" lbl) "")))
      ;; 	   (klipsify  (and  (plist-get info :html-klipsify-src)
      ;; 			    (member lang '("javascript" "js"
      ;; 					   "ruby" "scheme" "clojure" "php" "html")))))
      ;;       (if (lang) (format "<pre class=\"example\"%s>\n%s</pre>" label code)
      ;; 	  (format "<div class=\"org-src-container\">\n%s%s\n</div>"
      ;; 		;; Build caption.
      ;; 		(let ((caption (org-export-get-caption src-block)))
      ;; 		  (if (not caption) ""
      ;; 		    (let ((listing-number
      ;; 			   (format
      ;; 			    "<span class=\"listing-number\">%s </span>"
      ;; 			    (format
      ;; 			     (org-html--translate "Listing %d:" info)
      ;; 			     (org-export-get-ordinal
      ;; 			      src-block info nil #'org-html--has-caption-p)))))
      ;; 		      (format "<label class=\"org-src-name\">%s%s</label>"
      ;; 			      listing-number
      ;; 			      (org-trim (org-export-data caption info))))))
      ;; 		;; Contents.
      ;; 		(format "<pre><code class=\"language-%s\" %s>%s</code></pre>" lang label code)
      ;; 		)))))
    #+end_src
** export 
***  TODO custom 
    #+begin_src emacs-lisp

      ;; (org-export-define-derived-backend 'pd-html 'html
      ;;   :translate-alist '((inner-template . pd-html-inner-template)
      ;;                      (template . pd-html-template)))

      (defun pd-html-format-footnote-definition (fn)
	"Format the footnote definition FN."
	(let ((n (car fn)) (def (cdr fn)))
	  (concat
	   (format
	    "<li id=\"fn.%s\">" n)
	   def
	   (format
	    "<a href=\"#fnr.%s\">↩</a>" n)
	   "</li>\n")))

      (defun pd-html-footnote-section (info)
	"Format the footnote section.
      INFO is a plist used as a communication channel."
	(let* ((fn-alist (org-export-collect-footnote-definitions
			  (plist-get info :parse-tree) info))
	       (fn-alist
		(loop for (n type raw) in fn-alist collect
		      (cons n (if (eq (org-element-type raw) 'org-data)
				  (org-trim (org-export-data raw info))
				(format "<p>%s</p>"
					(org-trim (org-export-data raw info))))))))
	  (when fn-alist
	    (concat
	     "<section class=\"footnotes\">\n"
	     "<hr />\n"
	     "<ol>\n"
	     (mapconcat 'pd-html-format-footnote-definition fn-alist "\n")
	     "</ol>\n"
	     "</section>\n"))))

      (defun pd-html-inner-template (contents info)
	"Return body of document string after HTML conversion.
      CONTENTS is the transcoded contents string.  INFO is a plist
      holding export options."
	(concat
	 ;; Table of contents.
	 (let ((depth (plist-get info :with-toc)))
	   (when depth (org-html-toc depth info)))
	 ;; Document contents.
	 contents
	 ;; Footnotes section.
	 (pd-html-footnote-section info)))

      (defun pd-html-template (contents info)
	"Return complete document string after HTML conversion.
      CONTENTS is the transcoded contents string.  INFO is a plist
      holding export options."
	(concat
	 "<!DOCTYPE html>\n"
	 (format "<html lang=\"%s\">\n" (plist-get info :language))
	 "<head>\n"
	 (format "<meta charset=\"%s\">\n"
		 (coding-system-get org-html-coding-system 'mime-charset))
	 (format "<title>%s</title>\n"
		 (org-export-data (or (plist-get info :title) "") info))
	 (format "<meta name=\"author\" content=\"%s\">\n"
		 (org-export-data (plist-get info :author) info))
	 (format "<meta name=\"generator\" content=\"Org-mode\">\n")
	 "<link href=\"/css/style.css\" rel=\"stylesheet\" style=\"text/css\" />\n"
	 "<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n"
	 "</head>\n"
	 "<body>\n"
	 ;; Preamble.
	 "<header class=\"container\">\n"
	 "<h1 href=\"/\">Phillip Dixon</h1>\n"
	 "<nav>\n"
	 "<ul>\n"
	 "<li><a href=\"/\">Home</a></li>\n"
	 "<li><a href=\"/posts/\">Posts</a></li>\n"
	 "</ul>\n"
	 "</nav>\n"
	 "</header>\n"
	 ;; Document contents.
	 "<article class=\"container\">\n"
	 ;; Document title.
	 (format "<h1 class=\"title\">%s</h1>\n"
		 (org-export-data (or (plist-get info :title) "") info))
	 contents
	 "</article>\n"
	 ;; Postamble.
	 "<footer>\n"
	 "<div class=\"container\">\n"
	 "<p>&#169; 2009&#8211;14 <a href=\"/\">Phillip Dixon</a> ( <a rel=\"license\" href=\"http://creativecommons.org/licenses/by-nc-nd/3.0/nz/\">Some rights reserved</a> )</p>\n"
	 (format "<p class=\"creator\">Generated with: %s</p>\n"
		 (plist-get info :creator) info)
	 "</div>\n"
	 "</footer>\n"
	 "</body>\n"
	 "</html>\n"))

    #+end_src

    #+RESULTS:
    : pd-html-template

***  TODO inline css
    #+begin_src emacs-lisp
(defun my-org-inline-css-hook (exporter)
  "Insert custom inline css"
  (when (eq exporter 'html)
    (let* ((dir (ignore-errors (file-name-directory (buffer-file-name))))
           (path (concat dir "style.css"))
           (homestyle (or (null dir) (null (file-exists-p path))))
           (final (if homestyle "~/.emacs.d/org-style.css" path))) ;; <- set your own style file path
      (setq org-html-head-include-default-style nil)
      (setq org-html-head (concat
                           "<style type=\"text/css\">\n"
                           "<!--/*--><![CDATA[/*><!--*/\n"
                           (with-temp-buffer
                             (insert-file-contents final)
                             (buffer-string))
                           "/*]]>*/-->\n"
                           "</style>\n")))))

;;(add-hook 'org-export-before-processing-hook 'my-org-inline-css-hook)
    #+end_src
*** src blocks
    #+begin_src emacs-lisp
      (use-package htmlize
	:ensure t)
    #+end_src
*** ox-twbs 
    #+begin_src emacs-lisp
      ;; html exporter
      (use-package ox-twbs
	:ensure t
	:config
	(setq org-publish-project-alist
	      '(("org-notes"
		 :base-directory "~/org/"
		 :publishing-directory "~/public_html/"
		 :publishing-function org-twbs-publish-to-html
		 :with-sub-superscript nil
		 ))))
    #+end_src

*** solarized
    #+begin_src emacs-lisp

    #+end_src
    
** org mode specific key binding
   #+begin_src emacs-lisp

     ;; emacs key binding
     (with-eval-after-load 'org
       (define-key org-mode-map (kbd "C-c l") 'org-store-link)
       (define-key org-mode-map (kbd "C-c a") 'org-agenda)
       (define-key org-mode-map (kbd "C-c c") 'org-capture))

     ;; evil key binding
     (evil-define-key 'normal org-mode-map
       (kbd "<leader>a") 'org-agenda)
   #+end_src
* programming
**  TODO evil-mc  
   - configure key binding 
     #+begin_src emacs-lisp
       (use-package evil-mc
  :disabled t
       :ensure t 
       :config (evil-mc-mode 1))
     #+end_src 

     #+RESULTS:

** indent highlight
   #+begin_src emacs-lisp
     (use-package highlight-indent-guides
       :ensure t 
       :config
       (add-hook 'prog-mode-hook 'highlight-indent-guides-mode))


   #+end_src

   #+RESULTS:
   : t

** flycheck 
   #+begin_src emacs-lisp
(use-package flycheck
  :ensure t
  :init (global-flycheck-mode))

   #+end_src

   #+RESULTS:

** emacs-lisp
   #+begin_src emacs-lisp
     (defun electric-indent-mode-configure ()
       "Delete newline (?\n) from `electric-indent-chars'."
       (setq electric-indent-chars (delq 10 electric-indent-chars)))

     (add-hook 'emacs-lisp-mode-hook #'electric-indent-mode-configure)
   #+end_src
** lsp mode
   #+begin_src emacs-lisp
     (use-package lsp-mode
       :ensure t
       :init
       ;; set prefix for lsp-command-keymap (few alternatives - "C-l", "C-c l")
       (setq lsp-keymap-prefix "C-c l")
       :hook (;; replace XXX-mode with concrete major-mode(e. g. python-mode)
	      (python-mode . lsp)
	      ;; if you want which-key integration
	      (lsp-mode . lsp-enable-which-key-integration))
       :commands (lsp lsp-deferred)
       :config
       (add-hook 'lsp-mode-hook #'lsp-enable-which-key-integration))


     (use-package lsp-ivy 
       :ensure t
       :commands lsp-ivy-workspace-symbol)
     (use-package dap-mode
       :ensure t )

   #+end_src
** Languages 
*** Javascript, React 
    #+begin_src emacs-lisp
 (with-eval-after-load 'js
   (define-key js-mode-map (kbd "M-.") nil))
    #+end_src
*** java 
    #+begin_src emacs-lisp
 (require 'lsp-java)
 (add-hook 'java-mode-hook #'lsp)
    #+end_src
*** bash 
    #+begin_src emacs-lisp
 (add-hook 'sh-mode-hook #'lsp)
    #+end_src
*** dockerfiles 
    #+begin_src emacs-lisp
 ;;(add-hook sh-mode-hook #'lsp)
    #+end_src
*** python 
    #+begin_src emacs-lisp

      ;;(with-eval-after-load 'python
      ;;(define-key python-mode-map (kbd "H-x") #'python-shell-send-region))
      (evil-define-key 'normal python-mode-map
	(kbd "<leader>e") 'python-shell-send-buffer)
    #+end_src

    #+RESULTS:

* documenting
** latex 
*** basic configuration and packages setup
   #+begin_src emacs-lisp
     ;; enable spell checking in latex mode 
     (add-hook 'LaTeX-mode-hook 'flyspell-mode)
     ;;(add-hook 'prog-mode-hook 'flyspell-prog-mode)

     (use-package pdf-tools
       :ensure t
       :config
       (pdf-tools-install)
       (setq-default pdf-view-display-size 'fit-page)
       (setq pdf-annot-activate-created-annotations t)
       (define-key pdf-view-mode-map (kbd "C-s") 'isearch-forward)
       (define-key pdf-view-mode-map (kbd "C-r") 'isearch-backward)
       (add-hook 'pdf-view-mode-hook (lambda () (bms/pdf-midnite-amber))))

     (use-package tex
       :ensure auctex
       :mode ("\\.tex\\'" . latex-mode)
       :config
       (setq TeX-source-correlate-mode t)
       (setq TeX-source-correlate-method 'synctex)
       (setq TeX-auto-save t)
       (setq TeX-parse-self t)
       (setq reftex-plug-into-AUCTeX t)
       (setq-default TeX-master "main.tex")
       (pdf-tools-install)
       (setq TeX-view-program-selection '((output-pdf "PDF Tools") TeX-source-correlate-start-server t))
       ;; Update PDF buffers after successful LaTeX runs
       (add-hook 'TeX-after-compilation-finished-functions #'TeX-revert-document-buffer))


     (use-package latex-extra
       :ensure t
       :hook (LaTeX-mode . latex-extra-mode)
       :bind (:map latex-extra-mode-map ("C-c C-f" . nil)))


     ;; (use-package auctex-latexmk
     ;;   :ensure t
     ;;   :config
     ;;   (auctex-latexmk-setup)
     ;;   (setq auctex-latexmk-inherit-TeX-PDF-mode t))


     (use-package company-auctex
       :ensure t
       :init (company-auctex-init))


     (use-package company-math
       :ensure t)



     (use-package reftex
       :ensure t
       :hook (LaTeX-mode . turn-on-reftex)
       :config
       (setq reftex-cite-prompt-optional-args t)) ;; Prompt for empty optional arguments in cite

     (use-package company-reftex 
       :ensure t
       )

     ;; local configuration for TeX modes
     (defun my-latex-mode-setup ()
       (setq-local company-backends
		   (append '((company-math-symbols-latex company-math-symbols-unicode company-latex-commands company-auctex company-reftex))
			   company-backends)))

     (add-hook 'LaTeX-mode-hook 'my-latex-mode-setup)


     ;;(add-hook 'LaTeX-mode-hook #'lsp)
     ;;(setq lsp-latex-texlab-executable "/home/moamen/.cargo/bin/texlab")

   #+end_src

  #+RESULTS:
  | preview-mode-setup | lsp | my-latex-mode-setup | turn-on-reftex | latex-extra-mode | flyspell-mode |
*** key binding
     #+begin_src emacs-lisp
       ;; (with-eval-after-load 'latex
       ;; 	 (define-key LaTeX-mode-map (kbd "<S-return>") 'TeX-insert-macro))

       (evil-define-key 'normal LaTeX-mode-map
	 (kbd "TAB") nil

	 (kbd "<leader>W") 'TeX-save-document
	 (kbd "<leader>m") 'TeX-home-buffer

	 (kbd "<leader>t") 'reftex-toc
	 (kbd "<leader>u") 'reftex-toc-Rescan

	 (kbd "<leader>ac") 'reftex-citation
	 (kbd "<leader>al") 'reftex-label
	 (kbd "<leader>ar") 'reftex-reference

	 (kbd "<leader>am") 'TeX-insert-macro)
     #+end_src

     #+RESULTS:

** reveal.js
- default configuration for reveal.js
  #+begin_src emacs-lisp
(use-package ox-reveal
:ensure t 
:config 
(setq org-reveal-root "file:///home/moamen/software/reveal.js"))

  #+end_src

  #+RESULTS:
  
* FUN :) 
** wittrin 
   #+begin_src emacs-lisp
     (use-package wttrin
       :ensure t 
       :config 
       (setq wttrin-default-cities '("Taipei" "Tainan"))
       (setq wttrin-default-accept-language '("Accept-Language" . "zh-TW")))

   #+end_src

   #+RESULTS:
   : t 

* Keybinding docs 
|---------+--------+------------------------------------------------|
| *key*   | mode   | *action*                                       |
|---------+--------+------------------------------------------------|
| SPC     | global | (space) vim leader key                         |
| SPC w   | global | save                                           |
| SPC q   | global | close current window                           |
| SPC i   | global | open interactive buffers                       |
| SPC b   | global | recent files                                   |
| SPC f   | global | find file                                      |
| SPC r   | global | prefix for refactoring actions                 |
| SPC r r | global | replace string                                 |
| SPC c   | global | prefix for comment  actions                    |
| SPC p   | global | prefix for projectile ( project level actions) |
| SPC g   | global | prefix for magit                               |
|---------+--------+------------------------------------------------|
